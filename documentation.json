{
    "pipes": [],
    "interfaces": [
        {
            "name": "AbstractModel",
            "id": "interface-AbstractModel-50bde658801f281de7f11ea63f801ad6b9675dec0aa78dfe55677cfd5dd83fd3d9fcf739ee37d1aded667dd4e13ef4fe19016bd3db0df44456d85fd06b8c6604",
            "file": "src/app/store/models/abstract.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AbstractModel {\n    user_created: string;\n    date_created: Date;\n    user_updated: string;\n    date_updated: Date;\n}\n",
            "properties": [
                {
                    "name": "date_created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "date_updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user_created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "user_updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppFile",
            "id": "interface-AppFile-09dbee1e3ff8aa63f84835ca6486b731ebbc6eea1ae3cb4c87270bf71da20ba918f8445debb4247d6a339348bcda756f7d6a0f4058346bab6bba9880501231ad",
            "file": "src/app/store/models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Icc {\n    version: string;\n    intent: string;\n    cmm: string;\n    deviceClass: string;\n    colorSpace: string;\n    connectionSpace: string;\n    platform: string;\n    creator: string;\n    description: string;\n    copyright: string;\n}\n\nexport interface Metadata {\n    icc: Icc;\n}\n\nexport interface AppFile {\n    id: string;\n    storage: string;\n    filename_disk: string;\n    filename_download: string;\n    title: string;\n    type: string;\n    folder?: any;\n    uploaded_by: string;\n    uploaded_on: Date;\n    modified_by?: any;\n    modified_on: Date;\n    filesize: number;\n    width: number;\n    height: number;\n    duration?: any;\n    description?: any;\n    location?: any;\n    tags: string[];\n    metadata: Metadata;\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "filename_disk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "filename_download",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "filesize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "folder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "modified_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "modified_on",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "uploaded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "uploaded_on",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-767d45d3280046c1d0d1c3cdc95e5c749daea66cfcb38e18c0da86c31fceabde9ff67fb32115fbc795ed153b308d7fd19f793e39f9847816ceaaefe497e2ce56",
            "file": "src/app/store/app.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ProductInList } from \"./models/product-in-cart.model\";\nimport { Unit } from \"./models/unit.model\";\nimport { EntityState } from \"@ngrx/entity\";\nimport { Label } from \"./models/label.model\";\nimport { Product } from \"./models/product.model\";\n\nexport interface AppState {\n    cart: EntityState<ProductInList>;\n    products: EntityState<Product>;\n    units: EntityState<Unit>;\n    labels: EntityState<Label>;\n}",
            "properties": [
                {
                    "name": "cart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityState<ProductInList>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityState<Label>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityState<Product>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "units",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityState<Unit>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-53835256361c2267b77339fc351160cb462da4e80e482325ae7dd49dc2d1800546e4f1c43b7f12fe608bee6b4b63086ab268917664d997cf0b91f6c482d299d6-1",
            "file": "src/app/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { routerReducer } from '@ngrx/router-store';\nimport { environment } from 'src/environments/environment';\n\n\nexport interface AppState {}\n\nexport const reducers: ActionReducerMap<AppState> = {\n  router: routerReducer,\n};\n\nexport function logger(reducer: ActionReducer<any>): ActionReducer<any> {\n  return (state, action) => {\n    console.log('state before: ', state);\n    console.log('action', action);\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<AppState>[] = !!environment.production ? [logger]\n  : [];\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-bcb8222a27f986b5a0453cd2ef2f957c315bba4cdfe3404e6a13e4b7c57748845c7509bbd9c747dcef11fd565adf5ea7b475e092b156b46440de53efa4bdd166",
            "file": "src/app/auth/state/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport { User } from '../../store/models/user.model';\nimport { AuthActions } from '.';\nimport { LogInFailure, LogInSuccess, LogOut } from './auth.actions';\n\nexport interface AuthState {\n    user :User | null;\n}\n\nexport const initialAuthState: AuthState = {\n    user: undefined,\n}\n\nexport const authReducer = createReducer(\n    initialAuthState,\n    on(AuthActions.LogInSuccess, (state, { user }) => (\n        {   ...state,\n            user: user,\n        })),\n    on(LogInFailure, (state, { error }) => ({...state,errorMessage: error})),\n    on(LogOut, (state,action) => {\n        return {...state, user: null }\n    } )\n  );",
            "properties": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FeatureState",
            "id": "interface-FeatureState-6217d8b67af228245c8a0378ec19956bc31e04c988f081139777059d10350c165ed322f39951afd1ea10bbaa26ba7b164f14b749cb823f1416c5e1a16084c5c0",
            "file": "src/app/products/store/feature.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineReducers } from \"@ngrx/store\";\nimport * as fromProducts from './products/products.reducer';\nimport * as fromLabels from './labels/labels.reducer';\nimport * as fromUnits from './units/units.reducer';\n\nexport interface FeatureState {\n    products: fromProducts.State;\n    labels: fromLabels.State;\n    units: fromUnits.State;\n  }\n\nexport const reducers = combineReducers({\n    products: fromProducts.reducer,\n    labels: fromLabels.reducer,\n    units : fromUnits.reducer\n})",
            "properties": [
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromLabels.State",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromProducts.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "units",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromUnits.State",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FeatureState",
            "id": "interface-FeatureState-a41b020ad66cddb600f8e5ce9c98e8f552f5a4f7ca5bdcfd0e69b85f1e62673e50ad91dc44053592a17aeb804fa9d83f8cf6f695d4bc8a713b23e75369ecbcb5-1",
            "file": "src/app/admin/roles-permissions/store/feature.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { combineReducers } from \"@ngrx/store\";\nimport * as fromRoles from './roles/roles.reducer';\nimport * as fromPermissions from './permissions/permissions.reducer';\n\nexport interface FeatureState {\n    roles: fromRoles.State;\n    permissions: fromPermissions.State;\n  }\n\nexport const reducers = combineReducers({\n    roles: fromRoles.reducer,\n    permissions: fromPermissions.reducer,\n})",
            "properties": [
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromPermissions.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromRoles.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FeatureState-1"
        },
        {
            "name": "Icc",
            "id": "interface-Icc-09dbee1e3ff8aa63f84835ca6486b731ebbc6eea1ae3cb4c87270bf71da20ba918f8445debb4247d6a339348bcda756f7d6a0f4058346bab6bba9880501231ad",
            "file": "src/app/store/models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Icc {\n    version: string;\n    intent: string;\n    cmm: string;\n    deviceClass: string;\n    colorSpace: string;\n    connectionSpace: string;\n    platform: string;\n    creator: string;\n    description: string;\n    copyright: string;\n}\n\nexport interface Metadata {\n    icc: Icc;\n}\n\nexport interface AppFile {\n    id: string;\n    storage: string;\n    filename_disk: string;\n    filename_download: string;\n    title: string;\n    type: string;\n    folder?: any;\n    uploaded_by: string;\n    uploaded_on: Date;\n    modified_by?: any;\n    modified_on: Date;\n    filesize: number;\n    width: number;\n    height: number;\n    duration?: any;\n    description?: any;\n    location?: any;\n    tags: string[];\n    metadata: Metadata;\n}",
            "properties": [
                {
                    "name": "cmm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "colorSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "connectionSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "copyright",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "deviceClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "intent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Label",
            "id": "interface-Label-6a912f697c43fa106f358b938be10013dda0b716cf019619ad3a9d76b57288718efd0d4c215fd40ddfcb4df40c87a358bc22ef57720dae1adee7c4b7a77d17a7",
            "file": "src/app/store/models/label.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractModel } from \"./abstract.model\";\n\nexport interface Label extends AbstractModel {\n    id : string;\n    libelle: string;\n    color : string;\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "libelle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AbstractModel"
        },
        {
            "name": "Metadata",
            "id": "interface-Metadata-09dbee1e3ff8aa63f84835ca6486b731ebbc6eea1ae3cb4c87270bf71da20ba918f8445debb4247d6a339348bcda756f7d6a0f4058346bab6bba9880501231ad",
            "file": "src/app/store/models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Icc {\n    version: string;\n    intent: string;\n    cmm: string;\n    deviceClass: string;\n    colorSpace: string;\n    connectionSpace: string;\n    platform: string;\n    creator: string;\n    description: string;\n    copyright: string;\n}\n\nexport interface Metadata {\n    icc: Icc;\n}\n\nexport interface AppFile {\n    id: string;\n    storage: string;\n    filename_disk: string;\n    filename_download: string;\n    title: string;\n    type: string;\n    folder?: any;\n    uploaded_by: string;\n    uploaded_on: Date;\n    modified_by?: any;\n    modified_on: Date;\n    filesize: number;\n    width: number;\n    height: number;\n    duration?: any;\n    description?: any;\n    location?: any;\n    tags: string[];\n    metadata: Metadata;\n}",
            "properties": [
                {
                    "name": "icc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icc",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-01aea6aacb3213f2920ef77d27393a44b53a1575778b72dad2e2e2cc9e724c0e31485650a8f02f57a11ed1dc26917255e5ce15c7539d0680c763cfef0dcd817e",
            "file": "src/app/store/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractModel } from \"./abstract.model\";\nimport { AppFile } from \"./file.model\";\nimport { Label } from \"./label.model\";\n\nexport interface Product extends AbstractModel {\n    id : string;\n    status : string;\n    picture : AppFile;\n    name: string;\n    marque: string;\n    etiquette: Label;    \n}\n\nexport function compareProducts (a: Product, b: Product) {\n    return a.name.localeCompare(b.name);\n}",
            "properties": [
                {
                    "name": "etiquette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Label",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "marque",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "picture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppFile",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AbstractModel"
        },
        {
            "name": "ProductInList",
            "id": "interface-ProductInList-a5cc89984d46d20b3ebd656f15b891e0db320bdb3c720e724a5940cf36d006264c3f834b967e2607bf9a64c72f89f3c0a30ad4b12681be39a86208804543d285",
            "file": "src/app/store/models/product-in-cart.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Product } from \"./product.model\";\nimport { Unit } from \"./unit.model\";\n\nexport interface ProductInList {\n    product : Product;\n    products_id : Product;\n    quantity : number;\n    unit : Unit;\n    bought : boolean;\n}",
            "properties": [
                {
                    "name": "bought",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "products_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Unit",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-615c43a9289140527200e9aee1502e6b239e0d3244afef911f5e19b0c41967c8d6bc30bc427f02eba01b6ee8e935d27fc82c59b4b48c8a19bbc6bff7e894bea7",
            "file": "src/app/store/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type User = {\n  id: number\n  first_name: string | null\n  last_name: string | null\n  email: string | null\n  salt: string | null\n  hash: string\n  hashedRt: string | null\n  location: string | null\n  title: string | null\n  description: string | null\n  tags: string | null\n  avatar: string | null\n  language: string | null\n  theme: string | null\n  tfa_secret: string | null\n  status: string\n  role_id: number | null\n  token: string | null\n  last_access: Date | null\n  last_page: string | null\n  provider: string\n  external_identifier: string | null\n  auth_data: String | null\n  email_notifications: boolean | null\n}\nexport interface Role {\n  name : string;\n  id : string;\n} // end interface Role\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ShoppingList",
            "id": "interface-ShoppingList-99998a69275d3b2de78054aa96cd2a708b445feabe4853e99d05fb3bb3d3034f7109f64f5a36964b8983e2900b997ac411b7266d0a68e29bee53b666a3d3d9b3",
            "file": "src/app/shopping-lists/state/shopping-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ProductInList } from \"src/app/store/models/product-in-cart.model\";\n\nexport interface ShoppingList {\n  id: string;\n  status: string;\n  user_created: string;\n  date_created: Date;\n  user_updated?: string;\n  date_updated?: Date;\n  product: ProductInList[];\n}\n",
            "properties": [
                {
                    "name": "date_created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "date_updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductInList[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user_created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user_updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ShoppingListsState",
            "id": "interface-ShoppingListsState-548556ff6e4649cfed648fbd52a89f50d315c0c2df8a3b13df9909aaad93f3a8d4a8e63fda227b61052853670b32af8b8e3509229379feb8a539dcb8fc4e0260",
            "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from \"@ngrx/entity\";\nimport { createReducer, on } from \"@ngrx/store\";\nimport { ShoppingListsActions } from \"./action-types\";\nimport { ShoppingList } from \"./shopping-list\";\n\nexport interface ShoppingListsState extends EntityState<ShoppingList> {\n    allShoppingListsLoaded: boolean;\n}\nexport const adapter = createEntityAdapter<ShoppingList>();\nexport const initialShoppingListsState: ShoppingListsState = adapter.getInitialState({\n    allShoppingListsLoaded : false\n})\n\nexport const shoppingListsReducer = createReducer(\n    initialShoppingListsState,\n    on(ShoppingListsActions.allShoppingListsLoaded, (state, action) => adapter.setAll(action.shoppingLists, {...state, allShoppingListsLoaded: true})),\n)\n\nexport const  { selectAll, } = adapter.getSelectors();",
            "properties": [
                {
                    "name": "allShoppingListsLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "State",
            "id": "interface-State-e33fc8bb0cef5d8cb68d2b51046a210d9a34c0aedfce8d8fb6ae58ca1c12c33cce8dad8f790542831cf42aa00b4ac7f8f4ac46881dbd7aa1ca3d5d840c308726",
            "file": "src/app/cart/state/cart.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport { ProductInList } from 'src/app/store/models/product-in-cart.model';\nimport { CartActions } from '.';\n\nexport interface State extends EntityState<ProductInList> {\n  isLoading: boolean;\n}\n\nexport const adapter = createEntityAdapter<ProductInList>({\n  selectId: (productInList: ProductInList) => {\n    return productInList.product.id\n  }\n});\n\nexport const initialCartState = adapter.getInitialState({\n  isLoading: false,\n});\n\nexport const reducer = createReducer(\n  initialCartState,\n  on(CartActions.addProductToCart, (state, { product }) =>\n    adapter.addOne(product, state)\n  ),\n  on(CartActions.removeProductToCart, (state, { productId }) => adapter.removeOne(productId, state))\n);\n\nexport const { selectAll } = adapter.getSelectors();",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "State",
            "id": "interface-State-a6a40d48241f704fe370e309da33262b448080f1cd001b5ad1bc67601c5ac272e2a10be71a779886bf14f16bbaa588c6b150dc2a1e2327b0c3ee5ba41d23a6e9-1",
            "file": "src/app/admin/users/store/users.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from \"@ngrx/entity\";\nimport { createReducer, on } from \"@ngrx/store\";\nimport { User } from \"src/app/store/models/user.model\";\nimport { UsersActions } from \".\";\n\nexport interface State extends EntityState<User> {\n    isLoading: boolean;\n  }\n  \n  export const adapter = createEntityAdapter<User>({\n    selectId: (user: User) => {\n      return user.id\n    }\n  });\n  \n  export const reducer = createReducer(\n    adapter.getInitialState({\n        isLoading: false,\n    }),\n    on(UsersActions.loadAllUsers, (state) => ({...state, isLoading : true})),\n    on(UsersActions.loadAllUsersSuccess, (state, { users }) =>\n      adapter.setAll(users, {...state, isLoading : false})\n    ),\n  );\n  \n  export const { selectAll } = adapter.getSelectors();",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-98184ffcf1ec42e252d3858c23d9944ab556baa70054d2102b0b20456dd32646ea92191dd4651f88743fda8cab48e921593203b64c4398afec355faeeb7a1347-2",
            "file": "src/app/products/store/labels/labels.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport { Label } from 'src/app/store/models/label.model';\nimport { loadAllLabelsSuccess } from './labels.actions';\n\n\nexport interface State extends EntityState<Label> {\n  isLoading: boolean;\n}\nexport const adapter = createEntityAdapter<Label>();\n\nexport const reducer = createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(loadAllLabelsSuccess, (state, { labels }) => adapter.setAll(labels, {...state,isLoading: true})),\n)\n\nexport const { selectAll } = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-0aff9a6a21917532b514b546989a7c776c03a0d4cbab98cd0f8eb8d0a7429d6ac99de59658fa415123e8f50a204e177bd16704de9504ff56c9645042dbc367a2-3",
            "file": "src/app/products/store/products/products.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport { compareProducts, Product } from 'src/app/store/models/product.model';\n\nimport * as ProductActions from './products.actions';\n\nexport interface State extends EntityState<Product> {\n  isLoading: boolean;\n}\n\nexport const adapter = createEntityAdapter<Product>({\n  sortComparer: compareProducts\n});\n\nexport const reducer = createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(ProductActions.allProductsLoaded, (state, {products}) => adapter.setAll(products, { ...state, allProductsLoaded: true })),\n  on(ProductActions.createProductSuccess, (state, { product }) => adapter.addOne(product, state),),\n  on(ProductActions.updateProductSuccess, (state, { product }) => adapter.updateOne(product, state)),\n  \n);\n\nexport const { selectAll } = adapter.getSelectors();\n\n\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "State",
            "id": "interface-State-1abec0bc6af3569415519e3f39d8874ab1f3261e455c666948e8a00dc5529973029428d686d8a293fdce5848cea6c48404d172c00b665dfc10bfabe54517f7f2-4",
            "file": "src/app/products/store/units/units.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport { Unit } from 'src/app/store/models/unit.model';\nimport {\n  loadAllUnits,\n  loadAllUnitsFailure,\n  loadAllUnitsSuccess,\n} from './units.actions';\n\nexport interface State extends EntityState<Unit> {\n  isLoading: boolean;\n}\nexport const adapter = createEntityAdapter<Unit>();\n\nexport const initialState: State = adapter.getInitialState({\n  isLoading: false,\n});\n\nexport const reducer = createReducer(\n  initialState,\n  on(loadAllUnits, (state) =>\n    adapter.setAll([], { ...state, isLoading: true })\n  ),\n  on(loadAllUnitsSuccess, (state, { units }) =>\n    adapter.setAll(units, { ...state, isLoading: false })\n  ),\n  on(loadAllUnitsFailure, (state) =>\n    adapter.setAll([], { ...state, isLoading: false })\n  )\n);\nexport const { selectAll } = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "State-4"
        },
        {
            "name": "State",
            "id": "interface-State-5865271ed8a80493b3663f0890f82cd9ef1090ec52e1ef0af35ef35145c3dcffc4d88ee8f07d65d8827e211189e57aa738e6911eed10046533f95bf1ae8b0a6b-5",
            "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport { Permission } from '../models/permission.model';\n\nimport * as PermissionsActions from './permissions.actions';\n\nexport interface State extends EntityState<Permission> {\n  isLoading: boolean;\n}\n\nexport const adapter = createEntityAdapter<Permission>();\n\nexport const reducer = createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(PermissionsActions.loadAllPermissions, (state) => ({...state, isLoading: true})),\n  on(PermissionsActions.loadAllPermissionsSuccess, (state, { permissions }) => adapter.setAll(permissions, {...state, isLoading: true}),),\n  \n);\n\nexport const { selectAll } = adapter.getSelectors();\n\n\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "State-5"
        },
        {
            "name": "State",
            "id": "interface-State-dec6d9b5dea8a90f07d5ccb4177358e192d7cba04e277faba30bd07c58832a10a98eae0f6e456c9e7997b232b74b51c77b6623bd81764f5600ef09ab0100445e-6",
            "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\nimport { Role } from '../models/role.model';\nimport * as RolesActions from './roles.actions';\n\nexport interface State extends EntityState<Role> {\n  isLoading: boolean;\n}\n\nexport const adapter = createEntityAdapter<Role>();\n\nexport const reducer = createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(RolesActions.loadAllRoles, (state) => ({...state, isLoading: true})),\n  on(RolesActions.loadAllRolesSuccess, (state, { roles }) => adapter.setAll(roles, {...state, isLoading: true}),),\n);\n\nexport const { selectAll } = adapter.getSelectors();\n\n\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "State-6"
        },
        {
            "name": "Unit",
            "id": "interface-Unit-b5f70ed01eca3a2d07c99bc9ea33eabd27fe7feb00e174ab88090e56f81dcfce38c2a2352bdef2d88739527bc8e6d9d8691702d82a1553a6f9a445e881a52a58",
            "file": "src/app/store/models/unit.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractModel } from \"./abstract.model\";\n\nexport interface Unit extends AbstractModel {\n    id: string;\n    libelle: string;\n    abbr: string;\n}",
            "properties": [
                {
                    "name": "abbr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "libelle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "AbstractModel"
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-c1bd91ca30f05f5a4633887310ab06e1254a5c485266e0dba1fa0a3f5436e87b18aa569b4d3af90046b3b90659f47a62c021c78925712a6377625cbbbbc668c6",
            "file": "src/app/auth/state/auth.effects.ts",
            "properties": [
                {
                    "name": "logIn$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(AuthActions.LogIn),\n      switchMap(({ email, password }) =>\n        this._authService.login(email, password).pipe(\n          map((data) => {\n            localStorage.setItem('access_token', data.access_token);\n            localStorage.setItem('expires', data.expires);\n            localStorage.setItem('refresh_token', data.refresh_token);\n          }),\n          switchMap((noop) =>\n            this._authService.me().pipe(\n              tap((user) => localStorage.setItem('user', JSON.stringify(user))),\n              map((user) => {\n                return LogInSuccess({ user: user })}),\n              catchError((error) => {\n                debugger;\n                error.errors.forEach((error) => {\n                  this._toastr.error(error.message, 'Erreur');\n                });\n                return of(LogInFailure({ error }));\n              })\n            )\n          ),\n          \n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "logInFailure$",
                    "defaultValue": "createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(AuthActions.LogInSuccess),\n        map((action) => {})\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "logInSuccess$",
                    "defaultValue": "createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(AuthActions.LogInSuccess),\n        map((action) => {\n          this._router.navigate(['/']);\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "logOut$",
                    "defaultValue": "createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(AuthActions.LogOut),\n        tap((action) => {\n          localStorage.removeItem('user');\n          this._router.navigate(['/login']);\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { act, Actions, createEffect, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { EMPTY, of } from 'rxjs';\n\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\n\nimport { AppState } from '../../store/app.state';\nimport { User } from '../../store/models/user.model';\nimport { AuthService } from '../services/auth.service';\nimport { AuthActions } from '.';\nimport { LogIn, LogInFailure, LogInSuccess } from './auth.actions';\n\n@Injectable()\nexport class AuthEffects {\n  logIn$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(AuthActions.LogIn),\n      switchMap(({ email, password }) =>\n        this._authService.login(email, password).pipe(\n          map((data) => {\n            localStorage.setItem('access_token', data.access_token);\n            localStorage.setItem('expires', data.expires);\n            localStorage.setItem('refresh_token', data.refresh_token);\n          }),\n          switchMap((noop) =>\n            this._authService.me().pipe(\n              tap((user) => localStorage.setItem('user', JSON.stringify(user))),\n              map((user) => {\n                return LogInSuccess({ user: user })}),\n              catchError((error) => {\n                debugger;\n                error.errors.forEach((error) => {\n                  this._toastr.error(error.message, 'Erreur');\n                });\n                return of(LogInFailure({ error }));\n              })\n            )\n          ),\n          \n        )\n      )\n    )\n  );\n\n  logInSuccess$ = createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(AuthActions.LogInSuccess),\n        map((action) => {\n          this._router.navigate(['/']);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  logInFailure$ = createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(AuthActions.LogInSuccess),\n        map((action) => {})\n      ),\n    { dispatch: false }\n  );\n\n  logOut$ = createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(AuthActions.LogOut),\n        tap((action) => {\n          localStorage.removeItem('user');\n          this._router.navigate(['/login']);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(\n    private _actions$: Actions,\n    private _authService: AuthService,\n    private _router: Router,\n    private _toastr: ToastrService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-03aad079472594f91a4d3165e9dddf156aed01f33024b466ccdc6d73b44625519a6cd0ed2e095e332cc3fd45cb624c9ec32ac144c5967ea7f2a65c201003d737",
            "file": "src/app/auth/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "me",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, tap } from 'rxjs';\r\nimport { User } from 'src/app/store/models/user.model';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  register(user: User): Observable<boolean> {\r\n    return this.http.post<any>(`${environment.api}/users`, user);\r\n  }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http\r\n      .post<any>(`${environment.api}/auth/local/signin`, {\r\n        email,\r\n        password,\r\n      });\r\n  }\r\n\r\n  refresh(): Observable<any> {\r\n    return this.http\r\n      .post<any>(`${environment.api}/auth/refresh`, {}).pipe(tap((response) => {\r\n        localStorage.setItem('access_token',response.access_token);\r\n        localStorage.setItem('refresh_token',response.refresh_token);\r\n      }));\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    return this.http\r\n      .post(`${environment.api}/auth/logout`, {\r\n        id : JSON.parse(localStorage.getItem('user')).id,\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          localStorage.clear();\r\n        })\r\n      );\r\n  }\r\n\r\n  me(): Observable<User> {\r\n    return this.http\r\n      .get<User>(`${environment.api}/auth/me`)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-1f51db428a407553f5fa9468a41ca285cce043919c1fc8c89d2961b8fb56a754dc79ba49af11098fed9001d5d205461ef13f0c37f3cf3bd79611cbc2f86fca0e",
            "file": "src/app/cart/services/cart.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createShoppingList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ProductInList[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ProductInList[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ShoppingList>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchShoppingList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { ShoppingList } from 'src/app/shopping-lists/state/shopping-list';\nimport { ProductInList } from 'src/app/store/models/product-in-cart.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  constructor(private http: HttpClient) {}\n\n  getCurrentList() : Observable<ShoppingList>{\n    let params : HttpParams = new HttpParams()\n    .append('fields', '*,product.*,product.products_id.*,product.unit.*')\n    .append('filter', JSON.stringify({status : { _eq : 'draft'}}));\n    return this.http.get<any>(`${environment.api}/items/shopping_list`, { params }).pipe(\n      map((envelope: any) => envelope.data[0])\n    );\n  }\n\n  patchShoppingList(shoppingList: ShoppingList) {\n    return this.http\n      .patch<any>(`${environment.api}/items/shopping_list/${shoppingList.id}`, shoppingList)\n      .pipe(map((envelope: any) => envelope.data));\n  }\n\n  createShoppingList(shoppingList: ProductInList[]) {\n    let products = [];\n\n    shoppingList.map((productInList: ProductInList) => {\n      let products_id = productInList.product.id;\n      products.push({\n        products_id,\n        quantity: productInList.quantity,\n        unit: productInList.unit,\n      });\n    });\n    return this.http\n      .post<any>(`${environment.api}/items/shopping_list`, {\n        product: products,\n      })\n      .pipe(map((envelope: any) => envelope.data));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FileUploadService",
            "id": "injectable-FileUploadService-f98280c449e59332db0112d1a3d8851094c2653bcc87f58c0200d3239c4fd10e2749c7d252185c1c6b5fd4ca04d650f9245c5adf72ca570b3fd6ffa196b7161c",
            "file": "src/app/products/services/file-upload.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:8080'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FileUploadService {\n  private baseUrl = 'http://localhost:8080';\n\n  constructor(private http: HttpClient) { }\n\n  upload(filename: string,file: File): Observable<HttpEvent<any>> {\n    const formData: FormData = new FormData();\n    \n    formData.append('title',filename);\n    formData.append('file', file);\n\n    const req = new HttpRequest('POST', `${environment.api}/files`, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n\n    return this.http.request(req);\n  }\n\n  getFiles(): Observable<any> {\n    return this.http.get(`${environment.api}}/files`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LabelsEffects",
            "id": "injectable-LabelsEffects-31a55396d9093b89088b4e5dc77d34c3455ee488d4973a5400326a8984f575e6cc8c9e19258353409415159bb0f49d2b7332cd45913e9579f2a45f5f3f6b0cb1",
            "file": "src/app/products/store/effects/labels.effects.ts",
            "properties": [
                {
                    "name": "loadAllUnits$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(loadAllLabels),\n      exhaustMap(() =>\n        this._labelsService.getAllLabels().pipe(\n          map((labels) => loadAllLabelsSuccess({ labels })),\n          catchError((error) => {\n            return of(loadAllLabelsFailure());\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loadAllUnitsFailure$",
                    "defaultValue": "createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(loadAllLabelsFailure),\n        tap(() =>\n          this._toastr.error('Erreur lors de la récupération des étiquettes')\n        )\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, exhaustMap, map, of, tap } from 'rxjs';\nimport { LabelsService } from 'src/app/shared/services/labels.service';\nimport { loadAllLabels, loadAllLabelsFailure, loadAllLabelsSuccess } from '../labels/labels.actions';\n\n\n@Injectable()\nexport class LabelsEffects {\n  constructor(\n    private _actions$: Actions,\n    private _labelsService: LabelsService,\n    private _toastr: ToastrService\n  ) {}\n\n  loadAllUnits$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(loadAllLabels),\n      exhaustMap(() =>\n        this._labelsService.getAllLabels().pipe(\n          map((labels) => loadAllLabelsSuccess({ labels })),\n          catchError((error) => {\n            return of(loadAllLabelsFailure());\n          })\n        )\n      )\n    )\n  );\n\n  loadAllUnitsFailure$ = createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(loadAllLabelsFailure),\n        tap(() =>\n          this._toastr.error('Erreur lors de la récupération des étiquettes')\n        )\n      ),\n    { dispatch: false }\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_labelsService",
                        "type": "LabelsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_labelsService",
                        "type": "LabelsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LabelsService",
            "id": "injectable-LabelsService-24b15b124bc89db9528431a927ea6d7cf308615302b08c9aa5e4c823d6320d10f09551d13c98fe2c2f1c3d228b1eca253738fa176608eee92868c2c72a6220ec",
            "file": "src/app/shared/services/labels.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllLabels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Label>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { Label } from 'src/app/store/models/label.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LabelsService {\n\n  constructor(private http : HttpClient) { }\n\n  getAllLabels() : Observable<Array<Label>> {\n    return this.http\n    .get<Array<Label>>(`${environment.api}/items/etiquette`)\n    .pipe(\n      map((envelope: any) => envelope.data || [])\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyErrorHandler",
            "id": "injectable-MyErrorHandler-bc94a3052c7d633c2c115a56bbf7fec892c9694db6f0b6f37505865d5c6daaa7826f9d30c6c00f6d63d2bdbf60138a826ad491932f1db8521830125ac1be0458",
            "file": "src/app/utils/error-handler.utils.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ErrorHandler, Injectable } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { ErrorModalComponent } from \"../shared/components/error-modal/error-modal.component\";\n\n@Injectable()\nexport class MyErrorHandler implements ErrorHandler {\n\n    constructor(private _dialog : MatDialog,private _ar : ActivatedRoute,private _router : Router){}\n\n    handleError(error) {\n        console.error(error);\n        let dialogRef = this._dialog.open(ErrorModalComponent, {\n            data : error,\n            enterAnimationDuration:'350ms',\n            exitAnimationDuration: '250ms'\n        });\n        dialogRef.afterClosed().subscribe(result => {\n            //this._router.navigate(['../'],{relativeTo:this._ar});\n          });\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ar",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ar",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PermissionsEffects",
            "id": "injectable-PermissionsEffects-3b6f686a43f95b50c99e1966d3fcffac8c134b44bd253d4a06bad970d95b11dbe33a2e62efc5cfa11617d37f009f52561d2a41ec23efbb7a45d770d155ca183d",
            "file": "src/app/admin/roles-permissions/store/permissions/permissions.effects.ts",
            "properties": [
                {
                    "name": "$loadAllPermissions",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(PermissionsActions.loadAllPermissions),\n      concatMap(() =>\n        this._permissionsService.getAllPermissions().pipe(\n          map((permissions) => PermissionsActions.loadAllPermissionsSuccess({ permissions })),\n          catchError((error) => {\n            this._toastr.error(error.message, 'Error', {});\n            return of(PermissionsActions.loadAllPermissionsFailure());\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, concatMap, map, of } from 'rxjs';\nimport { PermissionsActions } from '.';\nimport { PermissionsService } from '../../services/permissions.service';\nimport { RolesService } from '../../services/roles.service';\n\n@Injectable()\nexport class PermissionsEffects {\n  constructor(\n    private _actions$: Actions,\n    private _permissionsService: PermissionsService,\n    private _toastr: ToastrService\n  ) {}\n\n  $loadAllPermissions = createEffect(() =>\n    this._actions$.pipe(\n      ofType(PermissionsActions.loadAllPermissions),\n      concatMap(() =>\n        this._permissionsService.getAllPermissions().pipe(\n          map((permissions) => PermissionsActions.loadAllPermissionsSuccess({ permissions })),\n          catchError((error) => {\n            this._toastr.error(error.message, 'Error', {});\n            return of(PermissionsActions.loadAllPermissionsFailure());\n          })\n        )\n      )\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_permissionsService",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_permissionsService",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PermissionsService",
            "id": "injectable-PermissionsService-e9adf5d037eab5b25686924acc19e019d16bbb00984e34a5a82d22d359d7a89032ea5ac29a07f20161c70d988936c81312e95d16eb2a04e79e3720f3b5adc9bd",
            "file": "src/app/admin/roles-permissions/services/permissions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllPermissions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Permission[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Permission } from '../store/models/permission.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionsService {\n\n  constructor(private http : HttpClient) { }\n\n  getAllPermissions(): Observable<Permission[]> {\n    return this.http.get<Permission[]>(`${environment.api}/permissions`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-e95fa4de0399c461319bd11ee43dcd0132c975820d95bbb11fd0fc1f77b74570a56ef632f43b062bed56d37d4bca6a631ed2353c05e3cd4eb275029d9f13b907",
            "file": "src/app/products/store/effects/product.effects.ts",
            "properties": [
                {
                    "name": "createProduct$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(createProduct),\n      mergeMap((action) => {\n        return this._productsSrv.createProduct(action.product).pipe(\n          map((newProduct) => {\n            console.log(newProduct);\n            this._toastr.success('Produit créé avec succès');\n            return createProductSuccess({ product: newProduct });\n          }),\n          catchError((error) => {\n            this._toastr.error(error, 'Erreur lors de la création du produit');\n            return EMPTY;\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(ProductActions.loadAllProducts),\n      concatMap(() =>\n        this._productsSrv.getProducts().pipe(\n          map((products) => ProductActions.allProductsLoaded({ products })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "updateProduct$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(ProductActions.updateProduct),\n      mergeMap((action) => {\n        return this._productsSrv.updateProduct(action.product).pipe(\n          map((product) => {\n            const updateProduct : Update<Product> ={\n              id: product.id,\n              changes: product\n            }\n            return ProductActions.updateProductSuccess({ product : updateProduct});\n          }),\n          catchError((error) => {\n            this._toastr.error(\n              error,\n              'Erreur lors de la modification du produit'\n            );\n            return EMPTY;\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Update } from '@ngrx/entity';\nimport { ToastrService } from 'ngx-toastr';\nimport { EMPTY } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { Product } from 'src/app/store/models/product.model';\nimport { ProductsService } from '../../services/products.service';\n\n\nimport { ProductActions } from '..';\nimport { createProduct, createProductSuccess } from '../products/products.actions';\n\n@Injectable()\nexport class ProductEffects {\n  constructor(\n    private _actions$: Actions,\n    private _productsSrv: ProductsService,\n    private _toastr: ToastrService\n  ) {}\n\n  loadProducts$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(ProductActions.loadAllProducts),\n      concatMap(() =>\n        this._productsSrv.getProducts().pipe(\n          map((products) => ProductActions.allProductsLoaded({ products })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  createProduct$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(createProduct),\n      mergeMap((action) => {\n        return this._productsSrv.createProduct(action.product).pipe(\n          map((newProduct) => {\n            console.log(newProduct);\n            this._toastr.success('Produit créé avec succès');\n            return createProductSuccess({ product: newProduct });\n          }),\n          catchError((error) => {\n            this._toastr.error(error, 'Erreur lors de la création du produit');\n            return EMPTY;\n          })\n        );\n      })\n    )\n  );\n\n  updateProduct$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(ProductActions.updateProduct),\n      mergeMap((action) => {\n        return this._productsSrv.updateProduct(action.product).pipe(\n          map((product) => {\n            const updateProduct : Update<Product> ={\n              id: product.id,\n              changes: product\n            }\n            return ProductActions.updateProductSuccess({ product : updateProduct});\n          }),\n          catchError((error) => {\n            this._toastr.error(\n              error,\n              'Erreur lors de la modification du produit'\n            );\n            return EMPTY;\n          })\n        );\n      })\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_productsSrv",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_productsSrv",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-cb6fc764e3968056ddbc625a08573b12801d6898a7726d4e0d3e065845733eac1335c3082892198103cc942cac3a74b5fba47d2f4814be3b54f546544a3770f4",
            "file": "src/app/products/services/products.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Product>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { Product } from 'src/app/store/models/product.model';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getProducts() : Observable<Array<Product>> {\r\n    return this.http\r\n    .get(`${environment.api}/items/products?fields=*,etiquette.*,picture.*`)\r\n    .pipe(map((envelope: any) => envelope.data || []));\r\n  }\r\n\r\n  createProduct(product: any) : Observable<Product> {\r\n    return this.http.post(`${environment.api}/items/products`, product)\r\n    .pipe(map((envelope: any) => envelope.data));\r\n  }\r\n\r\n  updateProduct(product: any) : Observable<Product> {\r\n    return this.http.patch<Product>(`${environment.api}/items/products/${product.id}`, product)\r\n    .pipe(map((envelope: any) => envelope.data));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RolesEffects",
            "id": "injectable-RolesEffects-8630603fb0e0ed19608707d27273fd89d48f14ce9ebd43635316bd44ad18cd9b0e146764d7ee098a2c477778b69012890bf8e375b9aa6877655e7dcdc25d9ea4",
            "file": "src/app/admin/roles-permissions/store/roles/roles.effects.ts",
            "properties": [
                {
                    "name": "$loadAllRoles",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(RolesActions.loadAllRoles),\n      concatMap(() =>\n        this._rolesService.getAllRoles().pipe(\n          map((roles) => RolesActions.loadAllRolesSuccess({ roles   })),\n          catchError((error) => {\n            return of(RolesActions.loadAllRolesFailure());\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, concatMap, map, of } from 'rxjs';\nimport { RolesActions } from '.';\nimport { RolesService } from '../../services/roles.service';\n\n@Injectable()\nexport class RolesEffects {\n  constructor(\n    private _actions$: Actions,\n    private _rolesService: RolesService,\n    private _toastr: ToastrService\n  ) {}\n\n  $loadAllRoles = createEffect(() =>\n    this._actions$.pipe(\n      ofType(RolesActions.loadAllRoles),\n      concatMap(() =>\n        this._rolesService.getAllRoles().pipe(\n          map((roles) => RolesActions.loadAllRolesSuccess({ roles   })),\n          catchError((error) => {\n            return of(RolesActions.loadAllRolesFailure());\n          })\n        )\n      )\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_rolesService",
                        "type": "RolesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_rolesService",
                        "type": "RolesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RolesService",
            "id": "injectable-RolesService-8095c981d8187109bbc0156ae3d8c840e0ef09d46f3ec092592eb0ae6ce099052e6236718935bafcf96628121afbdf77dd10a617a13c4ea93fc9be861904f2f7",
            "file": "src/app/admin/roles-permissions/services/roles.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Role[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Role } from '../store/models/role.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesService {\n\n  constructor(private http : HttpClient) { }\n\n  getAllRoles(): Observable<Role[]> {\n    return this.http.get<Role[]>(`${environment.api}/roles`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListEffects",
            "id": "injectable-ShoppingListEffects-24774d2d85336bad688b65af0ef63b55df76ac08d260128551d76029a660eb55369445d5b194c85ef2c9dbf2c588db43beac7a376358001f8ea66803f6fe5063",
            "file": "src/app/cart/state/cart.effects.ts",
            "properties": [
                {
                    "name": "checkOutList$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.checkOutCart),\n      switchMap((action) =>\n        this.shoppingListService\n          .createShoppingList(action.products)\n          .pipe(map((data) => CartActions.checkOutCartSuccess(data)))\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "checkOutListSuccess$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(CartActions.checkOutCartSuccess),\n        tap(() => {\n            this.toastr.success('Votre liste de courses a été créée avec succès');\n            this.router.navigate(['/']);\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, switchMap, tap } from 'rxjs';\nimport { CartService } from '../services/cart.service';\nimport { CartActions } from '.';\n\n@Injectable()\nexport class ShoppingListEffects {\n  constructor(\n    private actions$: Actions,\n    private shoppingListService: CartService,\n    private toastr : ToastrService,\n    private router: Router\n  ) {}\n\n  checkOutList$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.checkOutCart),\n      switchMap((action) =>\n        this.shoppingListService\n          .createShoppingList(action.products)\n          .pipe(map((data) => CartActions.checkOutCartSuccess(data)))\n      )\n    )\n  );\n\n  checkOutListSuccess$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(CartActions.checkOutCartSuccess),\n        tap(() => {\n            this.toastr.success('Votre liste de courses a été créée avec succès');\n            this.router.navigate(['/']);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shoppingListService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingListService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListsEffects",
            "id": "injectable-ShoppingListsEffects-7a6620a6c6a8f9a4e637ce578d806e94852e4b31ef6c9a1e4c2a3ffe9270109a85faf022a68f33d28e5c742df3286ecaa587fb098da7e7bea662f5f11bd52263",
            "file": "src/app/shopping-lists/state/shopping-lists.effects.ts",
            "properties": [
                {
                    "name": "loadAllShoppingLists$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(ShoppingListsActions.loadAllShoppingLists),\n      concatMap(() =>\n        this._shoppingListsSrv.getShoppingLists().pipe(\n          map((shoppingLists) =>\n            ShoppingListsActions.allShoppingListsLoaded({ shoppingLists })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, concatMap, EMPTY, map } from 'rxjs';\nimport { ProductsService } from 'src/app/products/services/products.service';\nimport { ShoppingListsService } from '../services/shopping-lists.service';\nimport { ShoppingListsActions } from './action-types';\n\n@Injectable()\nexport class ShoppingListsEffects {\n  constructor(\n    private _actions$: Actions,\n    private _shoppingListsSrv: ShoppingListsService,\n    private _toastr: ToastrService\n  ) {}\n\n  loadAllShoppingLists$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(ShoppingListsActions.loadAllShoppingLists),\n      concatMap(() =>\n        this._shoppingListsSrv.getShoppingLists().pipe(\n          map((shoppingLists) =>\n            ShoppingListsActions.allShoppingListsLoaded({ shoppingLists })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_shoppingListsSrv",
                        "type": "ShoppingListsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_shoppingListsSrv",
                        "type": "ShoppingListsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListsService",
            "id": "injectable-ShoppingListsService-9b6f3dbc327bd24eb86e372c318c032fbc6d34726397d68e7a9cfba2b1f289658a29eb9ca27941902875b38789b74d989e910f60edcd2669fb9bbe84c39a0fcb",
            "file": "src/app/shopping-lists/services/shopping-lists.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getShoppingLists",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingListsService {\n\n  constructor(private http : HttpClient) { }\n\n  getShoppingLists(){\n    return this.http.get(`${environment.api}/items/shopping_list?fields=*,product.*,product.products_id.*,product.unit.*`)\n      .pipe(map((envelope : any) => envelope.data));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StockService",
            "id": "injectable-StockService-687d72ed3a1a6ed7b7d4328c0fee9d994cde5b80a387101580de38f02989fb63508ae05c45969b748976a45f243029ede07399b050e3e021f0e578195fcee387",
            "file": "src/app/stock/services/stock.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getStocks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StockService {\r\n\r\n  constructor(private http : HttpClient) { }\r\n  \r\n  getStocks(): Observable<any> {\r\n    return this.http.get(`${environment.api}/items/stock?fields=*.*,products.products_id.*,products.unit.*,products.user_created.*,products.products_id.etiquette.*`).pipe(map((envelopp: any) => envelopp.data));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UnitsEffects",
            "id": "injectable-UnitsEffects-4ada89649186e459595e7187387787bc5ab996b5e6f5383d082f8052f910810c663abc9c27f487b6148dc3234844b27ca06df1c91a809398b62a67750df22bf9",
            "file": "src/app/products/store/effects/units.effects.ts",
            "properties": [
                {
                    "name": "loadAllUnits$",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(loadAllUnits),\n      exhaustMap(() =>\n        this._unitsService.getAllUnits().pipe(\n          map((units) => loadAllUnitsSuccess({ units })),\n          catchError((error) => {\n            return of(loadAllUnitsFailure());\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loadAllUnitsFailure$",
                    "defaultValue": "createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(loadAllUnitsFailure),\n        tap(() =>\n          this._toastr.error('Erreur lors de la récupération des unités')\n        )\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, exhaustMap, map, of, tap } from 'rxjs';\nimport { UnitsService } from 'src/app/shared/services/units.service';\nimport { ProductActions } from '..';\nimport { loadAllUnits, loadAllUnitsFailure, loadAllUnitsSuccess } from '../units/units.actions';\n\n@Injectable()\nexport class UnitsEffects {\n  constructor(\n    private _actions$: Actions,\n    private _unitsService: UnitsService,\n    private _toastr: ToastrService\n  ) {}\n\n  loadAllUnits$ = createEffect(() =>\n    this._actions$.pipe(\n      ofType(loadAllUnits),\n      exhaustMap(() =>\n        this._unitsService.getAllUnits().pipe(\n          map((units) => loadAllUnitsSuccess({ units })),\n          catchError((error) => {\n            return of(loadAllUnitsFailure());\n          })\n        )\n      )\n    )\n  );\n\n  loadAllUnitsFailure$ = createEffect(\n    () =>\n      this._actions$.pipe(\n        ofType(loadAllUnitsFailure),\n        tap(() =>\n          this._toastr.error('Erreur lors de la récupération des unités')\n        )\n      ),\n    { dispatch: false }\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_unitsService",
                        "type": "UnitsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_unitsService",
                        "type": "UnitsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UnitsService",
            "id": "injectable-UnitsService-e970654c7fa052d4db0cf227c7fd47b835628e4f805da3957ef0b49ad4f33fe9ccc79fa2534e768d7d74324350916ae5f0b518915b44833dfb25da0f8404304c",
            "file": "src/app/shared/services/units.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllUnits",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnitsService {\n\n  constructor(private http: HttpClient) { }\n\n  getAllUnits() : Observable<any> {\n    return this.http\n    .get(`${environment.api}/items/units`)\n    .pipe(map((envelope: any) => envelope.data || []));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserEffects",
            "id": "injectable-UserEffects-d549ed436217331890dcfcdfd3a8d35bfe56f7d24d73a6564394cfc48b9ee5fa19311f4bfd62cc44c8856e18702acb82282cacfdcdaba0475bcc8bd47c584d5a",
            "file": "src/app/admin/users/store/users.effects.ts",
            "properties": [
                {
                    "name": "$loadUsers",
                    "defaultValue": "createEffect(() =>\n    this._actions$.pipe(\n      ofType(UsersActions.loadAllUsers),\n      concatMap(() => \n        this._usersSrv.getUsers().pipe(\n          map((users) => UsersActions.loadAllUsersSuccess({ users })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, concatMap, EMPTY, map, of, switchMap } from 'rxjs';\nimport { UsersActions } from '.';\nimport { UsersService } from '../services/users.service';\n\n@Injectable()\nexport class UserEffects {\n  constructor(\n    private _actions$: Actions,\n    private _usersSrv: UsersService,\n    private _toastr: ToastrService\n  ) {}\n\n  $loadUsers = createEffect(() =>\n    this._actions$.pipe(\n      ofType(UsersActions.loadAllUsers),\n      concatMap(() => \n        this._usersSrv.getUsers().pipe(\n          map((users) => UsersActions.loadAllUsersSuccess({ users })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_usersSrv",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_usersSrv",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-ca165edbc60da5d1bf14eee436c9ab4827c1943eb5b4a179ad7105e1bd30346b570a720f88d46e4151f33ebc1b9016f3f8ff8d067b9bcd3a19805a6888497ffb",
            "file": "src/app/admin/users/services/users.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { User } from 'src/app/store/models/user.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  constructor(private http : HttpClient) { }\n\n  getUsers() : Observable<User[]>{ \n    return this.http.get<User[]>(`${environment.api}/users`)\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-4a064bbb8c5f42af507374810977dd6314d9c74c08c12041d64aab78212dc82c485f97fb0df42729b6325c8b6104ee22f1bd73467fc84f3843438417fd43f382",
            "file": "src/app/auth/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { tap } from 'rxjs/operators';\nimport { AppState } from '../../store/app.state';\nimport { AuthSelectors } from '../state';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private store: Store<AppState>, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(AuthSelectors.isLoggedIn),\n      tap((loggedIn) => {\n        if (!loggedIn) {\n          this.router.navigateByUrl('/login');\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "LabelResolver",
            "id": "injectable-LabelResolver-b05a65a29c77f247ead523fa9ce826bbfc3afe4b231cab99f8e248d5ce98b7a664adccfc9a8a5ac95f7fe2da46a356be1ba034c015162487094a0952ceab1163",
            "file": "src/app/products/resolvers/label.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Label[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { filter, finalize, first, Observable, of, tap } from 'rxjs';\nimport { Label } from 'src/app/store/models/label.model';\nimport { LabelActions, LabelSelectors } from '../store';\nimport { FeatureState } from '../store/feature.reducer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LabelResolver implements Resolve<Label[]> {\n  loading = false;\n  \n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Label[]> {\n    return this._store.pipe(\n      select(LabelSelectors.selectAllLabels),\n      tap((labels) => {\n        if (!labels.length && this.loading === false) {\n          this.loading = true;\n          this._store.dispatch(LabelActions.loadAllLabels());\n        }\n      }),\n      filter((labels : Label[]) => !!labels.length),\n      first(),\n      finalize(() => (this.loading = false))\n    );\n  }\n  constructor(private _store: Store<FeatureState>) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<FeatureState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<FeatureState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "PermissionResolver",
            "id": "injectable-PermissionResolver-5d3f8a51f4fd8622fc7230f8049dc239871b45b7376d41084942d746d54782c7e7520d98a8caabc2a7d3bdfe1f77355c7739f790789ee37542f2c4e2f2823f25",
            "file": "src/app/admin/roles-permissions/resolvers/permissions/permission.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionResolver implements Resolve<boolean> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return of(true);\n  }\n}\n",
            "type": "guard"
        },
        {
            "name": "PermissionsResolver",
            "id": "injectable-PermissionsResolver-36e8a0900e1d21e8f6cb39e8bd951290fc673fabf529699c0edb238f4d3026d664e130d437ffef96909140a85aea54ca4e4a211a2185086016fff249310b1a11",
            "file": "src/app/admin/roles-permissions/resolvers/permissions/permissions.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Permission[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { filter, finalize, first, Observable, of, tap } from 'rxjs';\nimport { Permission } from '../../store/models/permission.model';\nimport { PermissionsActions, PermissionsSelectors } from '../../store/permissions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionsResolver implements Resolve<Permission[]> {\n  private loading = false;\n\n  constructor(private store : Store) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Permission[]> {\n    return this.store.select(PermissionsSelectors.selectAllPermissions).pipe(\n      tap(permissions => {\n        if (permissions.length === 0 && this.loading === false) {\n          this.loading = true;\n          this.store.dispatch(PermissionsActions.loadAllPermissions());\n        }\n      }),\n      filter(permissions => permissions.length > 0),\n      first(),\n      finalize(() => this.loading = false)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ProductResolver",
            "id": "injectable-ProductResolver-3dd72db711677cb29828855f6438de126f5182f516728727ae38455a835953f0b4e72426e48f8cc44ac6952f8dc614ef34110aeb2b8948175638223d404571c3",
            "file": "src/app/products/resolvers/product.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { filter, finalize, first, Observable, tap } from 'rxjs';\nimport { Product } from 'src/app/store/models/product.model';\nimport { ProductActions, ProductSelectors } from '../store';\nimport { FeatureState } from '../store/feature.reducer';\n\n@Injectable()\nexport class ProductResolver implements Resolve<Product[]> {\n\n  loading = false;\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<Product[]> {\n    return this._store.pipe(\n      select(ProductSelectors.selectAllProducts),\n      tap((products) => {\n        if (!products.length && this.loading === false) {\n          this.loading = true;\n          this._store.dispatch(ProductActions.loadAllProducts());\n        }\n      }),\n      filter((products : Product[]) => !!products.length),\n      first(),\n      finalize(() => (this.loading = false))\n    );\n  }\n\n  constructor(private _store: Store<FeatureState>) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<FeatureState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<FeatureState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "RoleResolver",
            "id": "injectable-RoleResolver-560cd453ee0667af04b1b1f012b19c664bc154d59657b1ab93671657c4d0de5cc78e3131a54f4edd2f0c852993d15ce9eb8eda841f192e519fd714026c9cfbc6",
            "file": "src/app/admin/roles-permissions/resolvers/roles/role.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleResolver implements Resolve<boolean> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return of(true);\n  }\n}\n",
            "type": "guard"
        },
        {
            "name": "RolesResolver",
            "id": "injectable-RolesResolver-e24ddfd5e55e696377fd80afbaa37798f4c66e4d27d61966b57d639e9bab2d8a9848682469ba662311ae9235d35f0f8179908d97f674eb1861be04f841a9cf62",
            "file": "src/app/admin/roles-permissions/resolvers/roles/roles.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Role[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { filter, finalize, first, Observable, of, tap } from 'rxjs';\nimport { Role } from '../../store/models/role.model';\nimport { RolesActions, RolesSelectors } from '../../store/roles';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesResolver implements Resolve<Role[]> {\n  private loading = false;\n\n  constructor(private store : Store) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Role[]> {\n    return this.store.select(RolesSelectors.selectAllRoles).pipe(\n      tap(roles => {\n        if (roles.length === 0 && this.loading === false) {\n          this.loading = true;\n          this.store.dispatch(RolesActions.loadAllRoles());\n        }\n      }),\n      filter(roles => roles.length > 0),\n      first(),\n      finalize(() => this.loading = false)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ShoppingListsResolver",
            "id": "injectable-ShoppingListsResolver-1fa909f9d1d370f6415955a8b221b76a5776f565620089116e8f5494fdc79cbc00760b44386ac2ae1a9da55aee29c13d08b4bdfa364f6701ce0fdf332e431815",
            "file": "src/app/shopping-lists/state/shopping-lists.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from \"@angular/router\";\nimport { select, Store } from \"@ngrx/store\";\nimport { filter, finalize, first, Observable, tap } from \"rxjs\";\nimport { AppState } from \"src/app/store/app.state\";\nimport { ShoppingListsActions, ShoppingListsSelectors } from \"./action-types\";\n\n@Injectable()\nexport class ShoppingListsResolver implements Resolve<any> {\n    loading = false;\n\n    resolve( route : ActivatedRouteSnapshot , state : RouterStateSnapshot) : Observable<any> {\n        return this._store.pipe(\n            select(ShoppingListsSelectors.areAllShoppingListsLoaded),\n            tap((shoppingListsLoaded) => {\n                if (!this.loading && !shoppingListsLoaded) {\n                    this.loading = true;\n                    this._store.dispatch(ShoppingListsActions.loadAllShoppingLists());\n                }\n            }),\n            filter((shoppingListsLoaded) => shoppingListsLoaded),\n            first(),\n            finalize(() => this.loading = false)\n        )\n    }\n    \n    \n    constructor(private _store: Store<AppState>) {}\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "UnitResolver",
            "id": "injectable-UnitResolver-48f74d8f16f7350dc1daf674b415631fbae267f1f337c73fd3291ff60eed2a445f84ec3baf8da0f2bb2a8bd6dfce63fa3d813e0eb0a3447ac7d3f1105581d0e0",
            "file": "src/app/products/resolvers/unit.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Unit[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { filter, finalize, first, Observable, tap } from 'rxjs';\nimport { Unit } from 'src/app/store/models/unit.model';\nimport { UnitActions, UnitSelectors } from '../store';\nimport { FeatureState } from '../store/feature.reducer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnitResolver implements Resolve<Unit[]> {\n\n  loading = false;\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<Unit[]> {\n    return this._store.pipe(\n      select(UnitSelectors.selectAllUnits),\n      tap((units) => {\n        if (!units.length && this.loading === false) {\n          this.loading = true;\n          this._store.dispatch(UnitActions.loadAllUnits());\n        }\n      }),\n      filter((units: Unit[]) => !!units.length),\n      first(),\n      finalize(() => (this.loading = false))\n    );\n  }\n  constructor(private _store: Store<FeatureState>) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<FeatureState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<FeatureState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "UserResolver",
            "id": "injectable-UserResolver-ed8fa7e772f3cf339bb8809ccc3795274bdb992e23c2b9522008f4586455cc4f05dd898918ae9c7d3319a84c3436fff8f8501a7afa5ac7a154fb5adea5364277",
            "file": "src/app/admin/users/resolvers/user.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserResolver implements Resolve<boolean> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return of(true);\n  }\n}\n",
            "type": "guard"
        },
        {
            "name": "UsersResolver",
            "id": "injectable-UsersResolver-ee272a0eeb7f8b64fa26ce4d52e139c2b9b745bdbd7af8208e4449395d12f7daff043cf3d15b5ece68ff9072fa0c8348c5da3486d9d317e9c4f4ff11ba9acfb5",
            "file": "src/app/admin/users/resolvers/users.resolver.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { filter, finalize, first, Observable, of, tap } from 'rxjs';\nimport { User } from 'src/app/store/models/user.model';\nimport { UsersActions, UsersSelectors } from '../store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersResolver implements Resolve<User[]> {\n\n  private loading = false;\n\n  constructor(private store : Store) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<User[]> {\n    return this.store.select(UsersSelectors.selectAllUsers).pipe(\n      tap(users => {\n        if (users.length === 0) {\n          this.loading = true;\n          this.store.dispatch(UsersActions.loadAllUsers());\n        }\n      }),\n      filter(users => users.length > 0),\n      first(),\n      finalize(() => this.loading = false)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "SecurityInterceptor",
            "id": "injectable-SecurityInterceptor-65de7d76a078263a0a5d8b69400c70ca3a916fe27654e64c240f4f583df66ccd5b2ebcf21e11b34c9a8f338e537af873b41337f67fcb4e20b0f985d9c585f78f",
            "file": "src/app/shared/interceptors/SecurityInterceptor.ts",
            "properties": [
                {
                    "name": "AUTH_HEADER",
                    "defaultValue": "'Authorization'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshTokenInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshTokenSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAuthenticationToken",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<any>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpEvent, HttpInterceptor, HttpHandler,\r\n    HttpRequest, HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { throwError, Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { catchError, filter, take, switchMap, finalize } from 'rxjs/operators';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AuthService } from 'src/app/auth/services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Injectable()\r\nexport class SecurityInterceptor implements HttpInterceptor {\r\n\r\n    private AUTH_HEADER = 'Authorization';\r\n\r\n    private refreshTokenInProgress = false;\r\n    private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n\r\n    constructor(private authSrv: AuthService, private _router: Router) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if(!req.url.includes('signin') && !req.url.includes('signup')){\r\n            req = this.addAuthenticationToken(req);\r\n        }\r\n\r\n        if(this.refreshTokenInProgress){\r\n            return this.refreshTokenSubject.pipe(\r\n                switchMap(() => next.handle(this.addAuthenticationToken(req)))\r\n            )\r\n        } else {\r\n            return next.handle(req).pipe(\r\n                catchError((error: HttpErrorResponse) => {\r\n                    if(error.status === 401){\r\n                        this.refreshTokenInProgress = true;\r\n                        this.refreshTokenSubject = new BehaviorSubject<any>(null);\r\n\r\n                        return this.refreshAccessToken().pipe(\r\n                            switchMap(() => {\r\n                                debugger;\r\n                                this.refreshTokenInProgress = false;\r\n                                this.refreshTokenSubject.next(null);\r\n                                return next.handle(this.addAuthenticationToken(req))\r\n                            }),\r\n                            catchError((error: HttpErrorResponse) => {\r\n                                this.refreshTokenInProgress = false;\r\n                                this.refreshTokenSubject.error(error);\r\n                                this._router.navigate(['/auth/login']);\r\n                                return throwError(() => new HttpErrorResponse(error));\r\n                            })\r\n                        );\r\n                    } else {\r\n                        return throwError(() => new HttpErrorResponse(error));\r\n                    }\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    private addAuthenticationToken(req: HttpRequest<any>): HttpRequest<any> {\r\n        let tokenKey = 'access_token';\r\n        if(req.url.search('/refresh') !== -1){\r\n            tokenKey = 'refresh_token'\r\n        }\r\n        const jwtToken = localStorage.getItem(tokenKey);\r\n        //console.log(`Using access token: ${jwtToken}`);\r\n        if (jwtToken) {\r\n            const cloned = req.clone({\r\n                headers: req.headers.set(this.AUTH_HEADER, 'Bearer ' + jwtToken)\r\n            });\r\n            return cloned;\r\n        } else {\r\n            return req;\r\n        }\r\n       \r\n    }\r\n\r\n    private refreshAccessToken(): Observable<any> {\r\n        return this.authSrv.refresh();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "MismatchValidator",
            "id": "class-MismatchValidator-7a7e6cd44c8f349b0a3b3ff7aa8f73c2d2074a6cbb8372f91c09df2015868adbe80fe7ed5c7d3450ca13709f6e93c284c352fce896cf8570de4883908d70443c",
            "file": "src/app/shared/validators/MismatchValidator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport class MismatchValidator {\r\n\r\n  static mismatch(otherInputControl: AbstractControl | null): ValidatorFn {\r\n    \r\n    return (inputControl: AbstractControl): { [key: string]: boolean } | null => {\r\n      if(!otherInputControl) return null;\r\n      if (inputControl.value !== undefined\r\n        && inputControl.value.trim() != \"\"\r\n        && inputControl.value !== otherInputControl.value) {\r\n        return { 'mismatch': true };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "mismatch",
                    "args": [
                        {
                            "name": "otherInputControl",
                            "type": "AbstractControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "otherInputControl",
                            "type": "AbstractControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddInCartModalComponent",
            "id": "component-AddInCartModalComponent-59d1bcab5600ea91650f19f1ff18a572b8c218b8935ccddce27cd5c5f795610e78652fe8a3d9ea8dbee2f7d4710922fc1c27c818f2d3545471f5ca563a22b9fd",
            "file": "src/app/products/components/modals/add-in-cart-modal/add-in-cart-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-in-cart-modal",
            "styleUrls": [
                "./add-in-cart-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-in-cart-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddInCartModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "products$",
                    "defaultValue": "this._store.select(ProductSelectors.selectAllProducts)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "units$",
                    "defaultValue": "this._store.select(UnitSelectors.selectAllUnits)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { ProductSelectors, UnitSelectors } from 'src/app/products/store';\nimport { AppState } from 'src/app/store/app.state';\n\n\n@Component({\n  selector: 'app-add-in-cart-modal',\n  templateUrl: './add-in-cart-modal.component.html',\n  styleUrls: ['./add-in-cart-modal.component.scss']\n})\nexport class AddInCartModalComponent implements OnInit {\n\n  form : FormGroup;\n  products$ = this._store.select(ProductSelectors.selectAllProducts);\n  units$ = this._store.select(UnitSelectors.selectAllUnits);\n\n  constructor(\n    public dialogRef: MatDialogRef<AddInCartModalComponent>,\n    private _formBuilder: FormBuilder,\n    private _store: Store<AppState>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      product : [this.data.product,[Validators.required]],\n      quantity: [1,[Validators.required,Validators.min(1)]],\n      unit: [null,[Validators.required]],\n    });\n    \n  }\n\n  onNoClick(){\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-in-cart-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddInCartModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddInCartModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Ajouter un produit à la liste de course</h1>\n<div mat-dialog-content>\n  <div class=\"formulaire\">\n  <form [formGroup]=\"form\">\n    <div class=\"row\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Produit : </mat-label>\n        <mat-select formControlName=\"product\">\n          <mat-option\n            *ngFor=\"let product of products$ | async\"\n            [value]=\"product\"\n          >\n            {{ product.name }} - {{ product.marque }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Quantité : </mat-label>\n        <input matInput type=\"number\" formControlName=\"quantity\" />\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label> Unité : </mat-label>\n        <mat-select formControlName=\"unit\">\n          <mat-option *ngFor=\"let unit of units$ | async\" [value]=\"unit\">\n            {{ unit.libelle }} - {{ unit.abbr }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </form>\n</div>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">Annuler</button>\n  <button\n    mat-button\n    [mat-dialog-close]=\"form.value\"\n    cdkFocusInitial\n    [disabled]=\"form.invalid\"\n  >\n    Valider\n  </button>\n</div>\n"
        },
        {
            "name": "AdminNavigationComponent",
            "id": "component-AdminNavigationComponent-55e81c1de4631f18d0ee9c900e62ae7ade35582580c880d126dbebcf525176e262829026c70bc4000ce2bfb949d4c16d8260276ff5d53cd43ca14f6491477e71",
            "file": "src/app/admin/components/admin-navigation/admin-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-navigation",
            "styleUrls": [
                "./admin-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeLink",
                    "defaultValue": "this.links.find(link => link.isActive)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "background",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "links",
                    "defaultValue": "[{\n    label: 'Utilisateurs',\n    path: 'users',\n    isActive : true\n  },{\n    label: 'Roles & Permissions',\n    path: 'roles-permissions',\n    isActive : false\n  },\n  {\n    label: 'Statistiques',\n    path: 'stats',\n    isActive : false,\n    isDisabled : true\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "changeActiveLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleBackground",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n\n@Component({\n  selector: 'app-admin-navigation',\n  templateUrl: './admin-navigation.component.html',\n  styleUrls: ['./admin-navigation.component.scss']\n})\nexport class AdminNavigationComponent implements OnInit {\n\n  links = [{\n    label: 'Utilisateurs',\n    path: 'users',\n    isActive : true\n  },{\n    label: 'Roles & Permissions',\n    path: 'roles-permissions',\n    isActive : false\n  },\n  {\n    label: 'Statistiques',\n    path: 'stats',\n    isActive : false,\n    isDisabled : true\n  }];\n  activeLink = this.links.find(link => link.isActive);\n  background: ThemePalette = undefined;\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n  toggleBackground() {\n    this.background = this.background ? undefined : 'primary';\n  }\n\n  changeActiveLink(link : any){\n    this.links.forEach(linkInList => {\n      if(linkInList.path === link.path){\n        linkInList.isActive = true\n      }\n      else{\n        link.isActive = false\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./admin-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav mat-tab-nav-bar [backgroundColor]=\"background\" [tabPanel]=\"tabPanel\">\n    <a mat-tab-link *ngFor=\"let link of links\"\n       (click)=\"changeActiveLink(link)\"\n       [active]=\"link.isActive\"\n       [routerLink]=\"link.path\"\n       [disabled]=\"link.isDisabled\"> {{link.label}} </a>\n  </nav>\n  <mat-tab-nav-panel #tabPanel><router-outlet></router-outlet></mat-tab-nav-panel>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-64baece46d3d012f3bedb346db22c48a740b788ee1e47a10468074a91e20c629de2af6f053b44baddfd073481e403a593dc48c95124c51f66d71e82fcd2b782c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authSrv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cart$",
                    "defaultValue": "this._store.select(CartSelectors.selectCart)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoggedIn$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoggedOut$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "defaultValue": "'Home Stock'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user$",
                    "defaultValue": "this._store.select(AuthSelectors.user)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AppState } from './store/app.state';\r\nimport { AuthActions, AuthSelectors } from './auth/state';\r\nimport { AuthService } from './auth/services/auth.service';\r\nimport { CartSelectors } from './cart/state';\r\n//unt } from './products/state/products/products.selectors';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Home Stock';\r\n  loading = true;\r\n\r\n  isLoggedIn$ : Observable<boolean>;\r\n  isLoggedOut$ : Observable<boolean>;\r\n  user$ = this._store.select(AuthSelectors.user);\t\r\n  cart$ = this._store.select(CartSelectors.selectCart);\t\r\n\r\n\r\n  constructor(\r\n    private router: Router,\r\n    public authSrv: AuthService,\r\n    private _store : Store<AppState>) {\r\n    this.router.onSameUrlNavigation = 'reload';\r\n  }\r\n  ngOnInit(): void {\r\n    const userProfile = localStorage.getItem('user');\r\n    if(userProfile) {\r\n      this._store.dispatch(AuthActions.LogInSuccess({ user: JSON.parse(userProfile) }));\r\n    }\r\n    \r\n    this.router.events.subscribe(event => {\r\n      \r\n      switch(true){\r\n        case event instanceof NavigationStart:{\r\n          this.loading = true;\r\n          break;\r\n        }\r\n        case event  instanceof NavigationEnd:\r\n        case event instanceof NavigationCancel:\r\n        case event instanceof NavigationError : {\r\n          console.log('this.router.getCurrentNavigation() :>> ', this.router.getCurrentNavigation());\r\n          this.loading = false;\r\n          break\r\n        }\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    })\r\n    this.isLoggedIn$ = this._store.select(AuthSelectors.isLoggedIn)\r\n    this.isLoggedOut$ = this._store.select(AuthSelectors.isLoggedOut)\r\n  }\r\n\r\n  logout() {\r\n    this._store.dispatch(AuthActions.LogOut());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hs-parent {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  // height: calc(100vh - 64px);\r\n  //background-color: rgb(26, 31, 100);\r\n}\r\n.hs-container {\r\n  padding: 12px;\r\n    width: 75vw;\r\n    //height: 93vh;\r\n}\r\n\r\n.center {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  z-index: 1000;\r\n  -moz-transform: translateX(-50%) translateY(-50%);\r\n  -webkit-transform: translateX(-50%) translateY(-50%);\r\n  transform: translateX(-50%) translateY(-50%);\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\r\n  <!--   <button mat-icon-button>\r\n    <mat-icon>menu</mat-icon>\r\n  </button> -->\r\n  <button mat-button [routerLink]=\"['']\">\r\n    <mat-icon>home</mat-icon>\r\n    <span>Home Stock</span>\r\n  </button>\r\n  \r\n  <span class=\"spacer\"></span>\r\n\r\n  <ng-container *ngIf=\"isLoggedIn$ | async; else loggedOf\">\r\n    <button mat-button [routerLink]=\"['sand-box']\">\r\n      <mat-icon>bug_report</mat-icon>\r\n      <span>SandBox</span>\r\n    </button>\r\n    <button mat-button [matMenuTriggerFor]=\"productMenu\">\r\n      <mat-icon>category</mat-icon>\r\n      <span>Produits</span>\r\n    </button>\r\n    <button mat-button [matMenuTriggerFor]=\"stockMenu\">\r\n      <mat-icon>inventory_2</mat-icon>\r\n      <span>Stocks</span>\r\n    </button>\r\n    <button mat-button [routerLink]=\"['shopping-lists']\" [matBadge]=\"(cart$ | async).length\" matBadgeColor=\"accent\"\r\n    matBadgePosition=\"after\">\r\n      \r\n      <mat-icon>shopping_cart</mat-icon>\r\n      <span>Liste de course</span>\r\n    </button>\r\n    <button mat-button [matMenuTriggerFor]=\"recipesMenu\">\r\n      <mat-icon>menu_book</mat-icon>\r\n      <span>Recettes</span>\r\n    </button>\r\n    <button\r\n      mat-icon-button\r\n      class=\"example-icon\"\r\n      aria-label=\"Example icon-button with share icon\"\r\n    >\r\n      <mat-icon>share</mat-icon>\r\n    </button>\r\n    <button mat-button [matMenuTriggerFor]=\"menu\">\r\n      <ng-container *ngIf=\"user$ | async as user\">\r\n        <span>{{ user.first_name }} {{ user.last_name }}</span>\r\n      </ng-container>\r\n      <mat-icon>person</mat-icon>\r\n    </button>\r\n  </ng-container>\r\n  <ng-template #loggedOf>\r\n    <button mat-raised-button [routerLink]=\"['login']\">\r\n      <mat-icon>person</mat-icon>\r\n      <span>Se connecter</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-toolbar>\r\n<div class=\"hs-parent\">\r\n  <div class=\"hs-container\">\r\n    <div class=\"center\">\r\n      <mat-progress-spinner\r\n        diameter=\"150\"\r\n        mode=\"indeterminate\"\r\n        *ngIf=\"loading\"\r\n        color=\"accent\"\r\n      >\r\n      </mat-progress-spinner>\r\n    </div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n  <button mat-menu-item disabled>\r\n    <mat-icon>account_circle</mat-icon>\r\n    <span>Mon profil</span>\r\n  </button>\r\n  <mat-divider></mat-divider>\r\n  <button mat-menu-item [routerLink]=\"['administration','users']\">\r\n    <mat-icon>dashboard</mat-icon>\r\n    <span>Administration</span>\r\n  </button>\r\n  <mat-divider></mat-divider>\r\n  <button mat-menu-item (click)=\"logout()\">\r\n    <mat-icon>logout</mat-icon>\r\n    <span>Déconnection</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #productMenu=\"matMenu\">\r\n  <button mat-menu-item [routerLink]=\"['products']\">\r\n    <mat-icon>list</mat-icon>\r\n    <span>Liste des produits</span>\r\n  </button>\r\n  <button mat-menu-item [routerLink]=\"['products', 'new']\">\r\n    <mat-icon>add</mat-icon>\r\n    <span>Ajouter un produit</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #stockMenu=\"matMenu\">\r\n  <button mat-menu-item [routerLink]=\"['stocks']\">\r\n    <mat-icon>food_bank</mat-icon>\r\n    <span>Mes stocks</span>\r\n  </button>\r\n  <button mat-menu-item [routerLink]=\"['stocks', 'new']\">\r\n    <mat-icon>add</mat-icon>\r\n    <span>Créer un nouveau stock</span>\r\n  </button>\r\n</mat-menu>\r\n\r\n<mat-menu #recipesMenu=\"matMenu\">\r\n  <button mat-menu-item [routerLink]=\"['recipes']\">\r\n    <mat-icon>list</mat-icon>\r\n    <span>Ma liste de courses</span>\r\n  </button>\r\n  <button mat-menu-item [routerLink]=\"['recipes', 'new']\">\r\n    <mat-icon>add</mat-icon>\r\n    <span>Ajouter une recette</span>\r\n  </button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CartListComponent",
            "id": "component-CartListComponent-6068070cccd04c1eb964f63ab822eced81e9510cca335482e8c6ef108b26191918b9058450a4d006d245738c6bf51e6127f5b5d25355acac066c687aab728c9e",
            "file": "src/app/cart/cart-list/cart-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart-list",
            "styleUrls": [
                "./cart-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "defaultValue": "this._store.select(CartSelectors.selectCartLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "shoppingList$",
                    "defaultValue": "this._store.select(CartSelectors.selectCart)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "url",
                    "defaultValue": "environment.api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { map, take } from 'rxjs';\nimport { ShoppingList } from 'src/app/shopping-lists/state/shopping-list';\nimport { AppState } from 'src/app/store/app.state';\nimport { environment } from 'src/environments/environment';\nimport { CartActions, CartSelectors } from '../state';\n\nimport * as fromCart from '../state/cart.reducer';\n\n@Component({\n  selector: 'app-cart-list',\n  templateUrl: './cart-list.component.html',\n  styleUrls: ['./cart-list.component.scss'],\n})\nexport class CartListComponent {\n  \n  shoppingList$ = this._store.select(CartSelectors.selectCart);\n  isLoading$ = this._store.select(CartSelectors.selectCartLoading);\n  url = environment.api;\n\n  constructor(private _store: Store<fromCart.State>) {}\n  \n\n  onRemove(productId: string): void {\n    this._store.dispatch(\n      CartActions.removeProductToCart({ productId })\n    );\n  }\n\n  save(shoppingList : ShoppingList): void {\n      //this._cartStore.saveList(shoppingList)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loader{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}",
                    "styleUrl": "./cart-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<fromCart.State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<fromCart.State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\n<mat-card>\n  <ng-container *ngIf=\"shoppingList$ | async as shoppingList\">\n    <mat-card-header>\n      <mat-card-title>\n        <h1>Ma liste de course</h1>\n      </mat-card-title>\n   \n      <mat-card-subtitle>\n        <h2>{{ shoppingList.length }} produits dans la liste.</h2>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <ng-container *ngIf=\"isLoading$ | async; else content\">\n      <div class=\"loader\">\n        <mat-spinner></mat-spinner>\n      </div>\n    </ng-container>\n    <ng-template #content>\n      <mat-card-content>\n        <mat-list>\n          <mat-list-item *ngFor=\"let product of shoppingList\">\n            <img\n              matListAvatar\n              *ngIf=\"product.product.picture\"\n              src=\"{{ url }}/assets/{{ product.product.picture.id }}?key=thumbnail\"\n              alt=\"Photo de {{ product.product.name }}\"\n            />\n            <h4 matLine>\n              {{ product.product.name }}\n              {{ product.product.marque ? \" - \" + product.product.marque : \"\" }}\n            </h4>\n            <p matLine>{{ product.quantity }} {{ product.unit.libelle }}</p>\n            <button mat-icon-button (click)=\"onRemove(product.product.id)\">\n              <mat-icon>delete</mat-icon>\n            </button>\n          </mat-list-item>\n        </mat-list>\n      </mat-card-content>\n      <mat-card-actions>\n        <!-- <button mat-raised-button color=\"primary\" (click)=\"save()\">\n          Enregister la liste de course\n        </button> -->\n      </mat-card-actions>\n    </ng-template>\n  </ng-container>\n</mat-card>"
        },
        {
            "name": "CreateProductComponent",
            "id": "component-CreateProductComponent-231988ed60de778e5c01f4d59a8e9dafd780b7feb3bd24583fbeec89a1e4395bcbcf2af81cbb9679ea9ad7a66f3d79fcfbaad50e4dd7555e1c15d019fd62315a",
            "file": "src/app/products/components/modals/create-product/create-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-product",
            "styleUrls": [
                "./create-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateProductComponent>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "labels$",
                    "defaultValue": "this._store.select(LabelsSelectors.selectAllLabels)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "previews",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "progressInfos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "requiredTypeFiles",
                    "defaultValue": "['image/png', 'image/jpeg', 'image/jpg']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedFileNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileList",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { FileUploadService } from 'src/app/products/services/file-upload.service';\nimport * as LabelsSelectors from 'src/app/products/store/labels/labels.selectors';\nimport { AppState } from 'src/app/store/app.state';\n\n@Component({\n  selector: 'app-create-product',\n  templateUrl: './create-product.component.html',\n  styleUrls: ['./create-product.component.scss'],\n\n})\nexport class CreateProductComponent implements OnInit {\n\n  labels$ = this._store.select(LabelsSelectors.selectAllLabels);\n\n  form : FormGroup;\n\n  selectedFiles?: FileList;\n  selectedFileNames: string[] = [];\n\n  progressInfos: any[] = [];\n  requiredTypeFiles : string[] = ['image/png', 'image/jpeg', 'image/jpg'];\n  previews: string[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateProductComponent>,\n    private _formBuilder: FormBuilder,\n    private _store: Store<AppState>,\n    private _uploadService: FileUploadService,\n    private _toastrService : ToastrService\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      name: [null,[Validators.required]],\n      marque: [null],\n      picture : [null],\n      etiquette : [null,[Validators.required]],\n      status: [null,[Validators.required]]\n    });\n  }\n\n  onNoClick() : void {\n    this.dialogRef.close()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.progress-bar {\n    padding: 0;\n  }\n  \n  .progress {\n    width: 50px;\n  }\n  \n  .mat-input-element {\n    font-size: medium;\n    font-weight: 200;\n  }\n  \n  #fileInput {\n    position: absolute;\n    cursor: pointer;\n    z-index: 10;\n    opacity: 0;\n    height: 100%;\n    left: 0px;\n    top: 0px;\n  }\n  \n  .mat-toolbar-single-row {\n    height: auto !important;\n    background: transparent;\n    padding: 0;\n  }\n  \n  .mat-toolbar-single-row button {\n    width: 100px;\n  }\n  \n  .mat-form-field {\n    width: 100%;\n  }\n  \n  .message {\n    background-color: #ddd;\n    padding: 15px;\n    color: #333;\n    border: #aaa solid 1px;\n    border-radius: 4px;\n    margin: 15px 0;\n  }\n  \n  .preview {\n    max-width: 200px;\n    vertical-align: middle;\n  }\n  \n  .list-card {\n    margin-top: 20px;\n  }\n  \n  .list-item {\n    margin-bottom: 20px;\n  }",
                    "styleUrl": "./create-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateProductComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_uploadService",
                        "type": "FileUploadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateProductComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uploadService",
                        "type": "FileUploadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Ajouter une référence de produit.</h1>\n<div mat-dialog-content>\n  <!-- {{ labels$ | async | json}} -->\n  <form [formGroup]=\"form\">\n    <div class=\"row\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Nom : </mat-label>\n        <input matInput formControlName=\"name\" />\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Marque : </mat-label>\n        <input matInput formControlName=\"marque\" />\n      </mat-form-field>\n      <div>\n        <app-file-upload requiredTypeFiles=\"image/png\" formControlName=\"picture\"></app-file-upload>\n        <mat-error *ngIf=\"form.controls.picture.errors?.requiredTypeFiles\">\n          Seulement les formats jpg, jpeg et png sont autorisés. \n        </mat-error>\n        <mat-error *ngIf=\"form.controls.picture.errors?.fileUploadError\">\n          L'upload du fichier à échoué.\n        </mat-error>\n      </div>      \n      <mat-form-field appearance=\"fill\">\n        <mat-label> Etiquette : </mat-label>\n        <mat-select formControlName=\"etiquette\">\n          <mat-option *ngFor=\"let label of labels$ | async\" [value]=\"label.id\">\n            {{ label.libelle }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Status : </mat-label>\n        <mat-select formControlName=\"status\">\n            <mat-option value=\"published\"> Publié </mat-option>\n            <mat-option value=\"draft\"> Brouillon </mat-option>\n            <mat-option value=\"archived\"> Archivé </mat-option>\n          </mat-select>\n      </mat-form-field>\n    </div>\n  </form>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">Annuler</button>\n  <button\n    mat-button\n    [mat-dialog-close]=\"form.value\"\n    cdkFocusInitial\n    [disabled]=\"form.invalid\"\n  >\n    Valider\n  </button>\n</div>\n"
        },
        {
            "name": "ErrorModalComponent",
            "id": "component-ErrorModalComponent-8b7420fea80a1f64534971d3c45da2e4a0327ffd94dec52e1052dd479ce25138b5e9713302ef52a051d50a6a0107218bc7f3df85ff54dd9a428280c1964990b6",
            "file": "src/app/shared/components/error-modal/error-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-modal",
            "styleUrls": [
                "./error-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "env",
                    "defaultValue": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DialogRef } from '@angular/cdk/dialog';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-error-modal',\n  templateUrl: './error-modal.component.html',\n  styleUrls: ['./error-modal.component.scss'],\n})\nexport class ErrorModalComponent {\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: Error,\n    private dialogRef: DialogRef<ErrorModalComponent>\n  ) {}\n\n  public env = environment;\n  close(){\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./error-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Error",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<ErrorModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<ErrorModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\n<h2 mat-dialog-title>\n    <mat-icon>error</mat-icon>\n    <span>Erreur : {{ data.message }}</span>\n</h2>\n<ng-container *ngIf=\"!env.production\">\n    <mat-dialog-content>\n        <pre> {{ data.stack }} </pre>\n    </mat-dialog-content>\n</ng-container>\n<mat-dialog-actions align=\"end\">\n  <button mat-button color=\"primary\" (click)=\"close()\" cdkFocusInitial> Fermer </button>\n</mat-dialog-actions>"
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-95245d25881527c0a84c2d388be319bbc3e68e99bbf8ce86cbcb83135d194597588c62b1597273c3bc455cb6da208779c6f5b99ca28baf6d871fea7d4bc56125",
            "file": "src/app/shared/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: FileUploadComponent, multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: FileUploadComponent, multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "requiredTypeFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppFile",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "fileName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "fileUploadError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "fileUploadSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onValidatorChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "uploadProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "fileUpload",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileUpload",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "onValidatorChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onValidatorChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl<any | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl<any | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "AppFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "AppFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpEventType } from '@angular/common/http';\nimport { Component, Input } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\nimport { catchError, finalize, of } from 'rxjs';\nimport { FileUploadService } from 'src/app/products/services/file-upload.service';\nimport { AppFile } from 'src/app/store/models/file.model';\n\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FileUploadComponent,\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: FileUploadComponent,\n      multi: true,\n    }\n  ],\n})\nexport class FileUploadComponent implements ControlValueAccessor, Validator {\n  @Input()\n  requiredTypeFiles: string;\n  fileName: string = '';\n  file : AppFile;\n  fileUploadError: boolean;\n  uploadProgress: number;\n  onChange: Function = (file: AppFile) => {};\n  onTouched: Function = () => {};\n  onValidatorChange: Function = () => {};\n  disabled: boolean = false;\n  fileUploadSuccess : boolean = false;\n\n  constructor(private fileUploadSrv: FileUploadService) {}\n \n\n  writeValue(value: AppFile): void {\n    console.log('writeValue', value);\n    if(value){\n      this.fileName = value.filename_download;\n    }    \n    this.file = value;\n  }\n  registerOnChange(onChange: Function): void {\n    this.onChange = onChange;\n  }\n  registerOnTouched(onTouched: Function): void {\n    this.onTouched = onTouched;\n  }\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  onClick(fileUpload: HTMLInputElement) {\n    this.onTouched();\n    fileUpload.click();\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if(this.fileUploadSuccess){\n      return null;\n    }\n    let errors : any = {\n      requiredTypeFiles : this.requiredTypeFiles\n    };\n    console.log(control.getRawValue())\n\n    if(this.fileUploadError){\n      errors.uploadFailed = true;\n    }\n    return errors\n  }\n\n  registerOnValidatorChange?(onValidatorChange: () => void): void {\n    this.onValidatorChange = onValidatorChange;\n  }\n\n  onFileChange(event) {\n    const file: File = event.target.files[0];\n    if (file) {\n      this.fileName = file.name;\n      this.fileUploadSrv\n        .upload(this.fileName, file)\n        .pipe(\n          catchError((error) => {\n            this.fileUploadError = true;\n            return of(error);\n          }),\n          finalize(() => {\n            this.uploadProgress = null;\n          })\n        )\n        .subscribe((event) => {\n          if (event.type == HttpEventType.UploadProgress) {\n            this.uploadProgress = Math.round(\n              (event.loaded / event.total) * 100\n            );\n          }\n          if (event.type == HttpEventType.Response) {\n            this.fileUploadSuccess = true;\n            this.onChange((event.body.data as AppFile));\n            this.onValidatorChange();\n          }\n        });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".file-input {\n    display: none;\n}\n\n.file-upload {\n    display: flex;\n    align-items: flex-end;\n}\n\n.progress-bar {\n    margin-bottom: 10px;\n}",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fileUploadSrv",
                        "type": "FileUploadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "fileUploadSrv",
                        "type": "FileUploadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator"
            ],
            "templateData": "<input type=\"file\" (change)=\"onFileChange($event)\" class=\"file-input\"  #fileUpload/>\n<div class=\"file-upload\">\n    <mat-form-field>\n        <mat-label>Nom du fichier : </mat-label>\n        <input matInput [disabled]=\"true\" [value]=\"fileName\" />\n    </mat-form-field>\n    <button mat-mini-fab color=\"primary\" class=\"upload-btn\" (click)=\"onClick(fileUpload)\" [disabled]=\"disabled\" >\n        <mat-icon>attach_file</mat-icon>\n    </button>\n</div>\n<mat-progress-bar class=\"progress-bar\" mode=\"determinate\" [value]=\"uploadProgress\" *ngIf=\"uploadProgress\"></mat-progress-bar>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-5990494af37fb7fe6ef88b0b42c52f6d6d1ca83cf96de1b95886768c260a11b92916858301a2e81aab9dc0ae5e976212e465d006c19b2b71d9472a35de59b72e",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this._store.select(AuthSelectors.isLoggedIn)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoggedOut$",
                    "defaultValue": "this._store.select(AuthSelectors.isLoggedOut)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user$",
                    "defaultValue": "this._store.select(AuthSelectors.user)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { User } from '../store/models/user.model';\r\nimport { Observable } from 'rxjs';\r\nimport { AppState } from '../store/app.state';\r\nimport { AuthSelectors } from '../auth/state';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent {\r\n\r\n  isLoggedIn$ : Observable<boolean> = this._store.select(AuthSelectors.isLoggedIn);\r\n  isLoggedOut$ : Observable<boolean> = this._store.select(AuthSelectors.isLoggedOut)\r\n  user$ : Observable<User> = this._store.select(AuthSelectors.user);\t\r\n  \r\n\r\n  constructor(\r\n    private _store : Store<AppState>\r\n    ) { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"isLoggedOut$ | async\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title\r\n        >Bienvenue sur votre gestionnaire de stock pour la maison 🏠\r\n        !</mat-card-title\r\n      >\r\n      <mat-card-subtitle\r\n        >Gérer vos stocks de manière simple et intuitive !</mat-card-subtitle\r\n      >\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <pre>\r\n        Alertes sur mes stocks\r\n        \r\n        Témoignages.\r\n        </pre\r\n      >\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions align=\"end\">\r\n      <button\r\n        mat-raised-button\r\n        color=\"accent\"\r\n        [routerLink]=\"['login', 'register']\"\r\n      >\r\n        Créer un compte\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</ng-container>\r\n<ng-container *ngIf=\"isLoggedIn$ | async\">\r\n    <app-cart-list></app-cart-list>\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>Alertes sur mes stocks !</mat-card-title>\r\n      <mat-card-subtitle\r\n        >Vos alertes concernant les stocks s'affichent ici.</mat-card-subtitle\r\n      >\r\n    </mat-card-header>\r\n    <mat-card-content> </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <button mat-raised-button color=\"primary\">Gérer mes alertes</button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title\r\n        >Visualisation des derniers produits ajoutés.\r\n      </mat-card-title>\r\n      <mat-card-subtitle\r\n        >Voici la liste des derniers produits ajoutés au catalogue\r\n        !</mat-card-subtitle\r\n      >\r\n    </mat-card-header>\r\n    <mat-card-content> </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <button mat-raised-button color=\"primary\" [routerLink]=\"['products']\">\r\n        Voir tous les produits\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</ng-container>\r\n"
        },
        {
            "name": "ListDetailsComponent",
            "id": "component-ListDetailsComponent-87a9d6e5b409ee3fe9a7736f356b4f07256ecc3c96951d4e97902efeb862b7f50c559dae171627f9500eedc1478207d9b42b20603093146d59b1f7ca7698bccf",
            "file": "src/app/shopping-lists/components/list-details/list-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-details[shoppingList]",
            "styleUrls": [
                "./list-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "shoppingList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ShoppingList",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "updateList",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<ShoppingList>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "boughtProducts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ProductInList>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectionListChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MatSelectionListChange } from '@angular/material/list';\n\nimport { ProductInList } from 'src/app/store/models/product-in-cart.model';\nimport { ShoppingList } from '../../state/shopping-list';\n\n@Component({\n  selector: 'app-list-details[shoppingList]',\n  templateUrl: './list-details.component.html',\n  styleUrls: ['./list-details.component.scss'],\n})\nexport class ListDetailsComponent implements OnInit {\n  @Input() shoppingList: ShoppingList;\n\n  @Output() updateList: EventEmitter<ShoppingList> = new EventEmitter();\n\n  boughtProducts: Array<ProductInList> = [];\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.shoppingList.product.map((productInList) => {\n      if (productInList.bought) {\n        this.boughtProducts.push(productInList);\n      }\n    });\n  }\n\n  onSelectionChange(event: MatSelectionListChange): void {\n    let newshoppingList = this.shoppingList;\n    newshoppingList.product.forEach((productInList) => {\n      debugger;\n      if (\n        productInList.products_id.id === event.options[0].value.products_id.id\n      ) {\n        productInList.bought = true;\n      }\n      return productInList;\n    });\n    console.log(newshoppingList);\n    this.updateList.emit(newshoppingList);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <mat-selection-list #myList  (selectionChange)=\"onSelectionChange($event)\">\n    <mat-list-option *ngFor=\"let product of shoppingList.product\" [value]=\"product\" [selected]=\"product.bought\">\n      <mat-icon matListIcon>shopping_cart</mat-icon>\n      <h4 matLine>\n        {{ product.products_id.name }}\n        {{\n          product.products_id.marque ? \" - \" + product.products_id.marque : \"\"\n        }}\n      </h4>\n      <p matLine>{{ product.quantity }} - {{ product.unit.libelle }}</p>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-41e7b096286a93a1f8a28fb635a21f73b954ed8e020b343832839a8df7783002ee6e9e0a0b6471d47d7525686233bb8a7e5a33c2f021835e61d50bf83b4b8270",
            "file": "src/app/auth/components/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\r\n    email: new FormControl('test@test.com', [Validators.minLength(2), Validators.required]),\r\n    password: new FormControl('test', [Validators.required]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { map, switchMap } from 'rxjs';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { LogIn } from 'src/app/auth/state/auth.actions';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login-form',\r\n  templateUrl: './login-form.component.html',\r\n  styleUrls: ['./login-form.component.scss'],\r\n})\r\nexport class LoginFormComponent implements OnInit {\r\n  form: FormGroup = this.fb.group({\r\n    email: new FormControl('test@test.com', [Validators.minLength(2), Validators.required]),\r\n    password: new FormControl('test', [Validators.required]),\r\n  });\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private _store: Store<AppState>,\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  login() {\r\n    this._store.dispatch(\r\n      LogIn({\r\n        email: this.form.get('email')!.value,\r\n        password: this.form.get('password')!.value,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".formulaire {\r\n    display : flex;\r\n    flex-direction: column;\r\n}",
                    "styleUrl": "./login-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"form\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"login()\">\r\n        <mat-card>\r\n          <mat-card-header>\r\n            <mat-card-title>Authentifier vous</mat-card-title>\r\n            <mat-card-subtitle\r\n              >Vous devez vous identifier afin de pouvoir gérer vos\r\n              stocks.</mat-card-subtitle\r\n            >\r\n          </mat-card-header>\r\n          <mat-card-content>\r\n              <div class=\"formulaire\">\r\n                  <mat-form-field>\r\n                      <mat-label>Nom d'utilisateur</mat-label>\r\n                      <input type=\"text\" matInput formControlName=\"email\">\r\n                    </mat-form-field>\r\n                  <mat-form-field>\r\n                      <mat-label>Mot de passe</mat-label>\r\n                      <input type=\"password\" matInput formControlName=\"password\">\r\n                  </mat-form-field>\r\n              </div>\r\n          </mat-card-content>\r\n          <mat-card-actions align=\"end\">\r\n            <button mat-raised-button type=\"submit\" color=\"accent\">S'authentifier</button>\r\n            <button mat-raised-button type=\"button\" color=\"primary\">\r\n              J'ai perdu mon mot de passe.\r\n            </button>\r\n            <button mat-raised-button type=\"button\" color=\"primary\" [routerLink]=\"['register']\">Creer un compte</button>\r\n          </mat-card-actions>\r\n        </mat-card>\r\n      </form>\r\n</ng-container>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProductContainerComponent",
            "id": "component-ProductContainerComponent-3c2d63974966b928d556ddd4cb87b774a7a73a3546c9acbc62065f26c8849a3d01c9e612b20eceb5976c801d4fb57b70648a9c10a4235de9514bd853f5cd3f8e",
            "file": "src/app/products/containers/product-container/product-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-container",
            "styleUrls": [
                "./product-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading$",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [
                        {
                            "name": "productInCart",
                            "type": "ProductInList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productInCart",
                            "type": "ProductInList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreate",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\nimport { ProductInList } from 'src/app/store/models/product-in-cart.model';\nimport { Product } from 'src/app/store/models/product.model';\nimport { ProductActions, ProductSelectors } from '../../store';\nimport { CartActions } from '../../../cart/state';\nimport { map } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-product-container',\n  templateUrl: './product-container.component.html',\n  styleUrls: ['./product-container.component.scss']\n})\nexport class ProductContainerComponent implements OnInit {\n\n  products : Product[];\n  loading$ = true;\n  \n  onAdd(productInCart : ProductInList) {\n    this._store.dispatch(CartActions.addProductToCart({ product : productInCart }));\n  }\n\n  onRemove(productId : string) {\n    this._store.dispatch(ProductActions.removeProduct({ productId }));\n  }\n\n  onCreate(product : Product) {\n    this._store.dispatch(ProductActions.createProduct({ product }));\n  }\n\n  /* onFilter(filter : string) {\n    this.products$ = this._store.select(ProductSelectors.selectAllProducts).pipe(\n      map((products) => products.filter((product) => product.name.toLowerCase().includes(filter.toLowerCase())))\n    );\n  } */\n\n  onUpdate(product : Product) {\n    this._store.dispatch(ProductActions.updateProduct({ product }));\n  }\n\n  constructor(\n    private _route : ActivatedRoute,\n    private _store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.products = this._route.snapshot.data.products\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n    display: flex;\n    flex-direction: row;\n    flex: 1 1 1;\n}\n\n.product-list {\n    flex : 75;\n}\n\n.shopping-list {\n    flex : 25;\n}",
                    "styleUrl": "./product-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <app-product-list\n    class=\"product-list\"\n    [products]=\"products\"\n    (add)=\"onAdd($event)\"\n    (create)=\"onCreate($event)\"\n    \n    (update)=\"onUpdate($event)\"\n  ></app-product-list>\n  <app-cart-list class=\"shopping-list\"></app-cart-list>\n</div>\n\n"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-466e1a20d3cbdea4b4ce074687af14a01bfde917b191a64f56034a4819b038886b7afd1bfbc2665a40242422662813c5624f69912ffbbeef7dbef883ead99e74",
            "file": "src/app/products/components/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Product[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "add",
                    "defaultValue": "new EventEmitter<ProductInList>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "create",
                    "defaultValue": "new EventEmitter<Product>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "filter",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<Product>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['status','name', 'marque', 'etiquette', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "expandedElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "filterControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isAdmin$",
                    "defaultValue": "this._store.select(isAdmin)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "url",
                    "defaultValue": "environment.api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFilterValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddInCartModalComponent } from 'src/app/products/components/modals/add-in-cart-modal/add-in-cart-modal.component';\nimport { ProductInList } from 'src/app/store/models/product-in-cart.model';\nimport { environment } from 'src/environments/environment';\nimport { Product } from '../../../store/models/product.model';\nimport { CreateProductComponent } from '../modals/create-product/create-product.component';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\nimport { isAdmin } from 'src/app/auth/state/auth.selectors';\nimport { UpdateProductComponent } from '../modals/update-product/update-product.component';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class ProductListComponent {\n  @Input() products: Product[] = [];\n  @Output() add = new EventEmitter<ProductInList>();\n  @Output() create = new EventEmitter<Product>();\n  @Output() update = new EventEmitter<Product>();\n  @Output() filter = new EventEmitter<string>();\n\n  expandedElement: Product | null;\n  \n  isAdmin$ = this._store.select(isAdmin);\n  filterControl : FormControl;\n  url : string = environment.api;\n\n  displayedColumns = ['status','name', 'marque', 'etiquette', 'actions'];\n\n  constructor(private _matDialog : MatDialog,private _store: Store<AppState>) {\n   }\n\n  onFilterValueChanged(event: Event) {\n    this.filter.emit((event.target as HTMLInputElement).value);\n  }\n  \n  addToCart(product : Product) {\n    const dialog = this._matDialog.open(AddInCartModalComponent,{\n      data: {\n        product,\n      }\n    })\n    dialog.afterClosed().subscribe(( data ) => { \n      this.add.emit(data);\n    })\n  }\n  \n  addProduct() {\n    this._matDialog.open(CreateProductComponent)\n      .afterClosed()\n      .subscribe(( data ) => {\n        if(data){\n          console.log(data);\n          this.create.emit(data);\n        }\n        \n      })\n  }\n\n  updateProduct(product : Product) {\n    this._matDialog.open(UpdateProductComponent, {\n      data : product\n    })\n      .afterClosed()\n      .subscribe(( data ) => {\n        if(data){\n          console.log(data);\n          this.update.emit(data);\n        }\n        \n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dot {\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  display: inline-block;\n  &.draft {\n    background-color: rgb(235, 220, 11);\n  }\n  &.published {\n    background-color: rgb(23, 189, 31);\n  }\n  &.archived {\n    background-color: rgb(235, 11, 11);\n  }\n}\n\ntable {\n  width: 100%;\n}\n",
                    "styleUrl": "./product-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "_matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>\n      <h1>Produits référencés.</h1>\n    </mat-card-title>\n    <mat-card-subtitle>\n      <h2>{{ products.length }} références.</h2>\n    </mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-actions align=\"end\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Rechercher un produit : </mat-label>\n      <input matInput (input)=\"onFilterValueChanged($event)\" />\n    </mat-form-field>\n    <button mat-mini-fab color=\"primary\" (click)=\"addProduct()\">\n      <mat-icon>add</mat-icon>\n    </button>\n  </mat-card-actions>\n  <mat-card-content>\n    <table\n      mat-table\n      [dataSource]=\"products\"\n      multiTemplateDataRows\n      class=\"mat-elevation-z8\"\n    >\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef>Status</th>\n        <td mat-cell *matCellDef=\"let product\">\n          <span [ngClass]=\"['dot', product.status]\"></span>\n        </td>\n      </ng-container>\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef>Nom</th>\n        <td mat-cell *matCellDef=\"let product\">{{ product.name }}</td>\n      </ng-container>\n      <ng-container matColumnDef=\"marque\">\n        <th mat-header-cell *matHeaderCellDef>Marque</th>\n        <td mat-cell *matCellDef=\"let product\">{{ product.marque }}</td>\n      </ng-container>\n      <ng-container matColumnDef=\"etiquette\">\n        <th mat-header-cell *matHeaderCellDef>Etiquette</th>\n        <td mat-cell *matCellDef=\"let product\">\n          <ng-container *ngIf=\"product.etiquette\">\n            <mat-chip-list>\n              <mat-chip\n                [ngStyle]=\"{ 'background-color': product.etiquette.color }\"\n                >{{ product.etiquette.libelle }}</mat-chip\n              >\n            </mat-chip-list>\n          </ng-container>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef>Nom</th>\n        <td mat-cell *matCellDef=\"let product\">\n          <button\n            mat-icon-button\n            color=\"primary\"\n            aria-label=\"Ajouter au panier\"\n            (click)=\"addToCart(product)\"\n          >\n            <mat-icon>add</mat-icon>\n          </button>\n          <ng-container *ngIf=\"isAdmin$ | async\">\n            <button\n              mat-icon-button\n              color=\"primary\"\n              aria-label=\"Editer le produit\"\n              (click)=\"updateProduct(product)\"\n            >\n              <mat-icon>edit</mat-icon>\n            </button>\n          </ng-container>\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    </table>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "RegisterFormComponent",
            "id": "component-RegisterFormComponent-eb319988188cf59bfb966113b544edfdd538e41ee8f48d768d354ad7d0900b0557bdc3d4ac9ee180a70181a8abfb7d12d294c9bbfd7e1529f036602a54b4bcf0",
            "file": "src/app/auth/components/register-form/register-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-form",
            "styleUrls": [
                "./register-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\r\n    first_name: new FormControl('', [Validators.required]),\r\n    last_name: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.email, Validators.required]),\r\n    language: new FormControl(''),\r\n    password: new FormControl('', [\r\n      Validators.minLength(8),\r\n      Validators.required,\r\n    ]),\r\n    passwordConfirm: new FormControl('', [Validators.required]),\r\n    title: new FormControl(''),\r\n    description: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MismatchValidator } from 'src/app/shared/validators/MismatchValidator';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register-form',\r\n  templateUrl: './register-form.component.html',\r\n  styleUrls: ['./register-form.component.scss'],\r\n})\r\nexport class RegisterFormComponent implements OnInit {\r\n  form: FormGroup = this.fb.group({\r\n    first_name: new FormControl('', [Validators.required]),\r\n    last_name: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.email, Validators.required]),\r\n    language: new FormControl(''),\r\n    password: new FormControl('', [\r\n      Validators.minLength(8),\r\n      Validators.required,\r\n    ]),\r\n    passwordConfirm: new FormControl('', [Validators.required]),\r\n    title: new FormControl(''),\r\n    description: new FormControl(''),\r\n  });\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authSrv: AuthService,\r\n    private router: Router,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.form\r\n      .get('passwordConfirm')\r\n      ?.setValidators(\r\n        Validators.compose([\r\n          Validators.required,\r\n          MismatchValidator.mismatch(this.form.get('password')),\r\n        ])\r\n      );\r\n  }\r\n\r\n  register(): void {\r\n    this.authSrv.register(this.form.value).subscribe({\r\n      next: (response) => {\r\n        this.toastr.success('Vous pouvez désormais vous connecter', 'Succès !');\r\n        this.router.navigate(['login']);\r\n      },\r\n      error: (e) => this.toastr.error(e.message, 'Erreur 😥'),\r\n      complete: () => {},\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n    width: 100%;\r\n}",
                    "styleUrl": "./register-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"form\">\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"register()\">\r\n    <mat-card>\r\n      <mat-card-header>\r\n        <mat-card-title>Créer mon compte.</mat-card-title>\r\n        <mat-card-subtitle\r\n          >Vous devez vous identifier afin de pouvoir gérer vos\r\n          stocks.</mat-card-subtitle\r\n        >\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <div class=\"formulaire\">\r\n            <div class=\"row\">\r\n                <mat-form-field>\r\n                    <mat-label>Nom</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"first_name\"/>\r\n                  </mat-form-field>\r\n                  <mat-form-field>\r\n                    <mat-label>Prenom</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"last_name\"/>\r\n                  </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n                <mat-form-field>\r\n                    <mat-label>Adresse E-mail</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"email\"/>\r\n                  </mat-form-field>\r\n                  <mat-form-field>\r\n                    <mat-label>Langage</mat-label>\r\n                    <mat-select matNativeControl formControlName=\"language\">\r\n                      <mat-option value=\"en-US\">Anglais</mat-option>\r\n                      <mat-option value=\"fr-FR\">Francais</mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n                <mat-form-field>\r\n                    <mat-label>Mot de passe</mat-label>\r\n                    <input type=\"password\" matInput formControlName=\"password\"/>\r\n                  </mat-form-field>\r\n                  <mat-form-field>\r\n                    <mat-label>Confirmer le mot de passe</mat-label>\r\n                    <input type=\"password\" matInput formControlName=\"passwordConfirm\"/>\r\n                  </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n                <mat-form-field>\r\n                    <mat-label>Emploi</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"title\"/>\r\n                  </mat-form-field>\r\n            </div>\r\n            <div class=\"row\">\r\n                <mat-form-field>\r\n                    <mat-label>Biographie 😀</mat-label>\r\n                    <textarea type=\"text\" matInput formControlName=\"description\"></textarea>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n      </mat-card-content>\r\n      <mat-card-actions align=\"end\">\r\n        <button mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"!form.valid\">Créer mon compte</button>\r\n        <button mat-raised-button color=\"primary\" type=\"button\" [routerLink]=\"['']\">\r\n          J'ai déja un compte\r\n        </button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</ng-container>\r\n"
        },
        {
            "name": "RolePermissionsAssignmentComponent",
            "id": "component-RolePermissionsAssignmentComponent-52b12f0cb47d690ba0c14fc7ba40c4d35584a9c558f65ffa34f8c30e7056eded4b6eaf794fd51ac0541f19d5820df47dac2879f74934d12e8b22145b2efa4122",
            "file": "src/app/admin/roles-permissions/components/role-permissions-assignment/role-permissions-assignment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-role-permissions-assignment[permissions][assignedPermissions]",
            "styleUrls": [
                "./role-permissions-assignment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./role-permissions-assignment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "assignedPermissions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Permission[]",
                    "decorators": []
                },
                {
                    "name": "permissions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Permission[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Permission[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Permission[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport {CdkDragDrop, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\nimport { Permission } from '../../store/models/permission.model';\n\n@Component({\n  selector: 'app-role-permissions-assignment[permissions][assignedPermissions]',\n  templateUrl: './role-permissions-assignment.component.html',\n  styleUrls: ['./role-permissions-assignment.component.scss']\n})\nexport class RolePermissionsAssignmentComponent implements OnInit {\n\n\n  @Input() permissions: Permission[] = [];\n  @Input() assignedPermissions: Permission[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  drop(event: CdkDragDrop<Permission[]>) {\n    debugger;\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.example-container {\n    width: 400px;\n    max-width: 100%;\n    margin: 0 25px 25px 0;\n    display: inline-block;\n    vertical-align: top;\n  }\n  \n  .example-list {\n    border: solid 1px #ccc;\n    min-height: 60px;\n    background: white;\n    border-radius: 4px;\n    overflow: hidden;\n    display: block;\n  }\n  \n  .example-box {\n    padding: 20px 10px;\n    border-bottom: solid 1px #ccc;\n    color: rgba(0, 0, 0, 0.87);\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    box-sizing: border-box;\n    cursor: move;\n    background: white;\n    font-size: 14px;\n  }\n  \n  .cdk-drag-preview {\n    box-sizing: border-box;\n    border-radius: 4px;\n    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\n                0 8px 10px 1px rgba(0, 0, 0, 0.14),\n                0 3px 14px 2px rgba(0, 0, 0, 0.12);\n  }\n  \n  .cdk-drag-placeholder {\n    opacity: 0;\n  }\n  \n  .cdk-drag-animating {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  }\n  \n  .example-box:last-child {\n    border: none;\n  }\n  \n  .example-list.cdk-drop-list-dragging .example-box:not(.cdk-drag-placeholder) {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  }",
                    "styleUrl": "./role-permissions-assignment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"w-100\">\n    <mat-card-header>\n      <mat-card-title>\n        <h1>Permissions</h1>\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"example-container\">\n        <h3>Disponibles</h3>\n      \n        <mat-list\n          cdkDropList\n          #availableList=\"cdkDropList\"\n          [cdkDropListData]=\"permissions\"\n          [cdkDropListConnectedTo]=\"[rolePermissionList]\"\n          class=\"example-list\"\n          (cdkDropListDropped)=\"drop($event)\">\n          <mat-list-item class=\"example-box\" *ngFor=\"let item of permissions\" cdkDrag>{{item.action}}</mat-list-item>\n        </mat-list>\n      </div>\n      \n      <div class=\"example-container\">\n        <h3>Permissions du role</h3>\n      \n        <mat-list\n          cdkDropList\n          #rolePermissionList=\"cdkDropList\"\n          [cdkDropListData]=\"assignedPermissions\"\n          [cdkDropListConnectedTo]=\"[availableList]\"\n          class=\"example-list\"\n          (cdkDropListDropped)=\"drop($event)\">\n          <mat-list-item class=\"example-box\" *ngFor=\"let item of assignedPermissions\" cdkDrag>{{item.action}}</mat-list-item>\n        </mat-list>\n      </div>\n    </mat-card-content>\n    </mat-card>"
        },
        {
            "name": "RolesListComponent",
            "id": "component-RolesListComponent-ffa10d36564a57c5cd122629d2837ce7d1d350007ff5d77fc7ee015f1014365c359bf003984bd801fbe898aebfc1438085e0d6620f273f4fac78b1b56a5ef601",
            "file": "src/app/admin/roles-permissions/components/roles-list/roles-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-roles-list",
            "styleUrls": [
                "./roles-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roles-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Array",
                    "defaultValue": "Array",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['expand','name','icon','description', 'ip_access', 'enforce_tfa','admin_access', 'app_access','actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "expandedElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "filterControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "permissions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Permission[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewUserDetails",
                    "args": [
                        {
                            "name": "user",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Role } from '../../store/models/role.model';\n\nimport { Permission } from '../../store/models/permission.model';\n\n@Component({\n  selector: 'app-roles-list',\n  templateUrl: './roles-list.component.html',\n  styleUrls: ['./roles-list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class RolesListComponent implements OnInit {\n\n  public Array = Array;\n\n  roles : Role[] = [];\n  expandedElement: Role | null;\n  permissions : Permission[] = [];\n  filterControl : FormControl;\n  displayedColumns = ['expand','name','icon','description', 'ip_access', 'enforce_tfa','admin_access', 'app_access','actions'];\n\n  constructor(private _ar : ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.roles = this._ar.snapshot.data.roles;\n    this.permissions = this._ar.snapshot.data.permissions;\n  }\n  \n  onFilterValueChanged(event){\n    throw new Error('Not implemented yet');\n  }\n\n  addUser(){\n    throw new Error('Not implemented yet');\n  }\n\n  viewUserDetails(user : Role){\n    throw new Error('Not implemented yet');\n  }\n\n  updateUser(user : Role){\n    throw new Error('Not implemented yet');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dot {\n    height: 25px;\n    width: 25px;\n    border-radius: 50%;\n    display: inline-block;\n    &.draft {\n      background-color: rgb(235, 220, 11);\n    }\n    &.active {\n      background-color: rgb(23, 189, 31);\n    }\n    &.published {\n      background-color: rgb(23, 189, 31);\n    }\n    &.archived {\n      background-color: rgb(235, 11, 11);\n    }\n  }\n  \n  table {\n    width: 100%;\n  }\n\n  .w-100 {\n    width: 100%;\n  }\n\n  .detail-row {\n    height: 0;\n  }\n\n  .element-row td {\n    border-bottom-width: 0;\n  }\n\n  .element-detail {\n    overflow: hidden;\n    display: flex;\n  }\n",
                    "styleUrl": "./roles-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ar",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_ar",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <h1>Roles disponibles.</h1>\n      </mat-card-title>\n      <mat-card-subtitle>\n        <h2>{{  roles.length }} roles.</h2>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-actions align=\"end\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Rechercher un produit : </mat-label>\n        <input matInput (input)=\"onFilterValueChanged($event)\" />\n      </mat-form-field>\n      <button mat-mini-fab color=\"primary\" (click)=\"addUser()\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </mat-card-actions>\n    <mat-card-content>\n      <table\n        mat-table\n        [dataSource]=\"roles\"\n        multiTemplateDataRows\n        class=\"mat-elevation-z8\"\n      >\n      <ng-container matColumnDef=\"expand\">\n        <th mat-header-cell *matHeaderCellDef aria-label=\"row actions\">&nbsp;</th>\n        <td mat-cell *matCellDef=\"let element\">\n          <button mat-icon-button aria-label=\"expand row\" (click)=\"(expandedElement = expandedElement === element ? null : element); $event.stopPropagation()\">\n            <mat-icon *ngIf=\"expandedElement !== element\">keyboard_arrow_down</mat-icon>\n            <mat-icon *ngIf=\"expandedElement === element\">keyboard_arrow_right</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n        <ng-container matColumnDef=\"icon\">\n          <th mat-header-cell *matHeaderCellDef>Icon</th>\n          <td mat-cell *matCellDef=\"let role\">\n            <mat-icon>role.icon</mat-icon>\n          </td>\n        </ng-container>\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef>Nom</th>\n          <td mat-cell *matCellDef=\"let role\">{{ role.name }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"description\">\n          <th mat-header-cell *matHeaderCellDef>Description</th>\n          <td mat-cell *matCellDef=\"let role\">{{ role.description }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"ip_access\">\n            <th mat-header-cell *matHeaderCellDef>Accès IP</th>\n              <td mat-cell *matCellDef=\"let role\">\n                {{ role.ip_access }}\n            </td>\n          </ng-container>\n          \n          <ng-container matColumnDef=\"admin_access\">\n            <th mat-header-cell *matHeaderCellDef>Accès Admin</th>\n              <td mat-cell *matCellDef=\"let role\">\n                <mat-checkbox [(ngModel)]=\"role.admin_access\" [disabled]=\"true\"></mat-checkbox>\n            </td>\n          </ng-container>\n          \n          <ng-container matColumnDef=\"app_access\">\n            <th mat-header-cell *matHeaderCellDef>Accès Application</th>\n              <td mat-cell *matCellDef=\"let role\">\n                <mat-checkbox [(ngModel)]=\"role.app_access\" [disabled]=\"true\"></mat-checkbox>\n              </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"enforce_tfa\">\n            <th mat-header-cell *matHeaderCellDef>Enforce TFA</th>\n              <td mat-cell *matCellDef=\"let role\">\n                <mat-checkbox [(ngModel)] =\"role.enforce_tfa\" [disabled]=\"true\"></mat-checkbox>\n              </td>\n          </ng-container>\n  \n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Action</th>\n          <td mat-cell *matCellDef=\"let role\">\n            <button\n              mat-icon-button\n              color=\"primary\"\n              aria-label=\"Visualiser les détails\"\n              (click)=\"viewUserDetails(role)\"\n            >\n              <mat-icon>details</mat-icon>\n            </button>\n            <ng-container>\n              <button\n                mat-icon-button\n                color=\"primary\"\n                aria-label=\"Editer l'utilisateur\"\n                (click)=\"updateUser(role)\"\n              >\n                <mat-icon>edit</mat-icon>\n              </button>\n            </ng-container>\n          </td>\n        </ng-container>\n\n         <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n    <ng-container matColumnDef=\"expandedDetail\">\n      <td mat-cell *matCellDef=\"let role\" [attr.colspan]=\"displayedColumns.length\">\n        <div class=\"element-detail\"\n            [@detailExpand]=\"role == expandedElement ? 'expanded' : 'collapsed'\">\n          <app-role-permissions-assignment \n          [permissions]=\"permissions\" \n          [assignedPermissions]=\"Array.from(role.permissions)\">\n          </app-role-permissions-assignment>\n        </div>\n      </td>\n    </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\" class=\"element-row\"\n        [class.expanded-row]=\"expandedElement === row\"\n        (click)=\"expandedElement = expandedElement === row ? null : row\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"detail-row\"></tr>\n      </table>\n    </mat-card-content>\n  </mat-card>\n  "
        },
        {
            "name": "ShoppingListsComponent",
            "id": "component-ShoppingListsComponent-46688f5063332fa15f73e26e664cf8c385ac98983b66585791e8b6c6265569369be08a15f3af7711d0225b3ece71e647281ffbda323b9a1f890da9959b845e8f",
            "file": "src/app/shopping-lists/components/shopping-lists/shopping-lists.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-lists",
            "styleUrls": [
                "./shopping-lists.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-lists.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "shoppingLists$",
                    "defaultValue": "this._store.select(ShoppingListsSelectors.selectAllShoppingLists)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateList",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\nimport { ShoppingListsSelectors } from '../../state/action-types';\n\n@Component({\n  selector: 'app-shopping-lists',\n  templateUrl: './shopping-lists.component.html',\n  styleUrls: ['./shopping-lists.component.scss']\n})\nexport class ShoppingListsComponent implements OnInit {\n\n  shoppingLists$ = this._store.select(ShoppingListsSelectors.selectAllShoppingLists);\n\n  constructor(private _store :Store<AppState>) { }\n\n\n  ngOnInit(): void {\n  }\n  onUpdateList(event){\n    console.log(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dot {\n    height: 25px;\n    width: 25px;\n    border-radius: 50%;\n    display: inline-block;\n    &.draft {\n      background-color: rgb(235, 220, 11);\n    }\n    &.published {\n      background-color: rgb(23, 189, 31);\n    }\n    &.archived {\n      background-color: rgb(235, 11, 11);\n    }\n  }",
                    "styleUrl": "./shopping-lists.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <ng-container *ngFor=\"let list of shoppingLists$ | async; let index = index\">\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          {{ list.date_created | date }}\n        </mat-panel-title>\n        <mat-panel-description>\n          <span [ngClass]=\"['dot', list.status]\"></span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <app-list-details [shoppingList]=\"list\" (updateList)=\"onUpdateList($event)\"></app-list-details>\n    </mat-expansion-panel>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "StockListComponent",
            "id": "component-StockListComponent-9827457fbb70351f0a0caa87eb705977d3e67dfc1bd29e41b56ca96e9c441f9f0a343d8869b5d4934fa07ebe712b062d8aa999223a4f886d86e9abd93c713e46",
            "file": "src/app/stock/components/stock-list/stock-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stock-list",
            "styleUrls": [
                "./stock-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stock-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "stock$",
                    "defaultValue": "this.stockSrv.getStocks()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { StockService } from '../../services/stock.service';\r\n\r\n@Component({\r\n  selector: 'app-stock-list',\r\n  templateUrl: './stock-list.component.html',\r\n  styleUrls: ['./stock-list.component.scss']\r\n})\r\nexport class StockListComponent implements OnInit {\r\n\r\n  stock$ : Observable<any> = this.stockSrv.getStocks();\r\n\r\n  constructor(private stockSrv : StockService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chips{\r\n    margin: 0 1em 0 1em;\r\n}",
                    "styleUrl": "./stock-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stockSrv",
                        "type": "StockService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "stockSrv",
                        "type": "StockService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title> Mes stocks </mat-card-title>\r\n    <mat-card-subtitle></mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <ng-container *ngIf=\"stock$ | async as stocks\">\r\n      <mat-accordion>\r\n        <mat-expansion-panel *ngFor=\"let stock of stocks\" hideToggle>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n              {{ stock.name }}\r\n            </mat-panel-title>\r\n            <mat-panel-description>\r\n              {{ stock.products.length }} produit(s) dans le\r\n              stock</mat-panel-description\r\n            >\r\n          </mat-expansion-panel-header>\r\n          <mat-list>\r\n            <mat-list-item *ngFor=\"let product of stock.products\">\r\n              <div mat-line>{{ product.products_id.name }}</div>\r\n              <div mat-line>\r\n                {{ product.quantity }} {{ product.unit?.libelle }}\r\n              </div>\r\n              <div *ngIf=\"product.alertAt\" mat-line>\r\n                Alerte à : {{ product.alertAt }}{{ product.unit?.abbr }}\r\n              </div>\r\n              <div\r\n                class=\"chips\"\r\n                *ngIf=\"product.products_id.etiquette as etiquette\"\r\n              >\r\n                <mat-chip-list>\r\n                  <mat-chip color=\"primary\">\r\n                    {{ etiquette.Libelle }}</mat-chip\r\n                  >\r\n                </mat-chip-list>\r\n              </div>\r\n              <div class=\"created\" *ngIf=\"product.user_created\">\r\n                <span mat-line\r\n                  >Ajouté par : {{ product.user_created.first_name }}\r\n                  {{ product.user_created.last_name }} le\r\n                  {{ product.created_at | date: \"dd/MM/yyyy HH:mm\" }}</span\r\n                >\r\n              </div>\r\n              <div>\r\n                <button mat-icon-button #tooltip=\"matTooltip\"\r\n                matTooltip=\"Ajouter à ma liste de course\"\r\n                matTooltipPosition=\"above\">\r\n                  <mat-icon>shopping_cart</mat-icon>\r\n                </button>\r\n                <button mat-icon-button #tooltip=\"matTooltip\"\r\n                matTooltip=\"Editer les informations\"\r\n                matTooltipPosition=\"above\">\r\n                  <mat-icon>edit</mat-icon>\r\n                </button>\r\n                <button mat-icon-button #tooltip=\"matTooltip\"\r\n                matTooltip=\"Supprimer le produit du stock\"\r\n                matTooltipPosition=\"above\">\r\n                  <mat-icon>delete</mat-icon>\r\n                </button>\r\n              </div>\r\n            </mat-list-item>\r\n          </mat-list>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </ng-container>\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "UpdateProductComponent",
            "id": "component-UpdateProductComponent-f65a08d77206c8747db3284848ea7a2db0f6843d20a5590d7191023dd20b4458f8cb374e1a71b00e1b21110ae7ae736d78ffd97cef806a38338ca3887a20f8b5",
            "file": "src/app/products/components/modals/update-product/update-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update-product",
            "styleUrls": [
                "./update-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./update-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<UpdateProductComponent>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "labels$",
                    "defaultValue": "this._store.select(LabelsSelectors.selectAllLabels)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "previews",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "progressInfos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedFileNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileList",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOkClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectFiles",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError, EMPTY, map } from 'rxjs';\nimport { FileUploadService } from 'src/app/products/services/file-upload.service';\nimport { AppState } from 'src/app/store/reducers';\nimport { Product } from 'src/app/store/models/product.model';\n\nimport * as LabelsSelectors from 'src/app/products/store/labels/labels.selectors';\n@Component({\n  selector: 'app-update-product',\n  templateUrl: './update-product.component.html',\n  styleUrls: ['./update-product.component.scss']\n})\nexport class UpdateProductComponent implements OnInit {\n\n  labels$ = this._store.select(LabelsSelectors.selectAllLabels);\n\n  form : FormGroup;\n\n  selectedFiles?: FileList;\n  selectedFileNames: string[] = [];\n\n  progressInfos: any[] = [];\n\n  previews: string[] = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<UpdateProductComponent>,\n    private _formBuilder: FormBuilder,\n    private _uploadService: FileUploadService,\n    private _toastrService : ToastrService,\n    private _store: Store<AppState>,\n    @Inject(MAT_DIALOG_DATA) public product: Product\n  ) { }\n\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      name: [this.product.name,[Validators.required]],\n      marque: [this.product.marque ? this.product.marque : null],\n      picture : [this.product.picture ? this.product.picture : null],\n      etiquette : [this.product.etiquette?.id,[Validators.required]],\n      status: [this.product.status,[Validators.required]]\n    });\n  }\n\n  selectFiles(event: any): void {\n    this.progressInfos = [];\n    this.selectedFileNames = [];\n    this.selectedFiles = event.target.files;\n\n    this.previews = [];\n    if (this.selectedFiles && this.selectedFiles[0]) {\n      const numberOfFiles = this.selectedFiles.length;\n      for (let i = 0; i < numberOfFiles; i++) {\n        const reader = new FileReader();\n\n        reader.onload = (e: any) => {\n          this.previews.push(e.target.result);\n        };\n\n        reader.readAsDataURL(this.selectedFiles[i]);\n\n        this.selectedFileNames.push(this.selectedFiles[i].name);\n      }\n    }\n  }\n\n  upload(idx: number, file: File): void {\n    event.preventDefault();\n    this.progressInfos[idx] = { value: 0, fileName: file.name };\n\n    if (file) {\n      this._uploadService.upload(this.form.value.name ? this.form.value.name :  'produit',file).pipe(\n        map(event => {\n          if (event.type === HttpEventType.UploadProgress) {\n            this.progressInfos[idx].value = Math.round(\n              (100 * event.loaded) / event.total\n            );\n          } else if (event instanceof HttpResponse) {\n            this.form.patchValue({picture: event.body.data.id});\n            this._toastrService.success('Image enregistrée.', 'Success');\n          }\n        }),\n        catchError((error) => {\n          this.progressInfos[idx].value = 0;\n          this._toastrService.error(`Impossible d\\'envoyer le fichier. ${error}`, 'Erreur');\n          return EMPTY;\n        })\n      ).subscribe();\n    }\n  }\n\n  uploadFiles(): void {\n    if (this.selectedFiles) {\n      for (let i = 0; i < this.selectedFiles.length; i++) {\n        this.upload(i, this.selectedFiles[i]);\n      }\n    }\n  }\n\n  onNoClick() : void {\n    this.dialogRef.close()\n  }\n\n  onOkClick() : void {\n    this.dialogRef.close({...this.form.value , id: this.product.id});\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .progress-bar {\n      padding: 0;\n    }\n    \n    .progress {\n      width: 50px;\n    }\n    \n    .mat-input-element {\n      font-size: medium;\n      font-weight: 200;\n    }\n    \n    #fileInput {\n      position: absolute;\n      cursor: pointer;\n      z-index: 10;\n      opacity: 0;\n      height: 100%;\n      left: 0px;\n      top: 0px;\n    }\n    \n    .mat-toolbar-single-row {\n      height: auto !important;\n      background: transparent;\n      padding: 0;\n    }\n    \n    .mat-toolbar-single-row button {\n      width: 100px;\n    }\n    \n    .mat-form-field {\n      width: 100%;\n    }\n    \n    .message {\n      background-color: #ddd;\n      padding: 15px;\n      color: #333;\n      border: #aaa solid 1px;\n      border-radius: 4px;\n      margin: 15px 0;\n    }\n    \n    .preview {\n      max-width: 200px;\n      vertical-align: middle;\n    }\n    \n    .list-card {\n      margin-top: 20px;\n    }\n    \n    .list-item {\n      margin-bottom: 20px;\n    }",
                    "styleUrl": "./update-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UpdateProductComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_uploadService",
                        "type": "FileUploadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "product",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UpdateProductComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_uploadService",
                        "type": "FileUploadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastrService",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "product",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Ajouter une référence de produit.</h1>\n<div mat-dialog-content>\n  <form [formGroup]=\"form\">\n    <div class=\"row\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Nom : </mat-label>\n        <input matInput formControlName=\"name\" />\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Marque : </mat-label>\n        <input matInput formControlName=\"marque\" />\n      </mat-form-field>\n      <div>\n        <app-file-upload requiredTypeFiles=\"image/png\" formControlName=\"picture\"></app-file-upload>\n        <mat-error *ngIf=\"form.controls.picture.errors?.requiredTypeFiles\">\n          Seulement les formats jpg, jpeg et png sont autorisés. \n        </mat-error>\n        <mat-error *ngIf=\"form.controls.picture.errors?.fileUploadError\">\n          L'upload du fichier à échoué.\n        </mat-error>\n      </div>   \n      <mat-form-field appearance=\"fill\">\n        <mat-label> Etiquette : </mat-label>\n        <mat-select formControlName=\"etiquette\">\n<!--           <mat-option *ngFor=\"let label of labels$ | async\" [value]=\"label.id\">\n            {{ label.libelle }}\n          </mat-option> -->\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Status : </mat-label>\n        <mat-select formControlName=\"status\">\n            <mat-option value=\"published\"> Publié </mat-option>\n            <mat-option value=\"draft\"> Brouillon </mat-option>\n            <mat-option value=\"archived\"> Archivé </mat-option>\n          </mat-select>\n      </mat-form-field>\n    </div>\n  </form>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">Annuler</button>\n  <button\n    mat-button\n    (click)=\"onOkClick()\"\n    cdkFocusInitial\n    [disabled]=\"form.invalid\"\n  >\n    Valider\n  </button>\n</div>\n"
        },
        {
            "name": "UserDetailsComponent",
            "id": "component-UserDetailsComponent-d6b230c38d19b254c7183c9f15c4e685e553d46d87ec8a7a63c954dd6c5d1557dc4164992d7f7ddbb66980787ce796cf9a1e5745cc0fad6997870b651a159e55",
            "file": "src/app/admin/users/components/modals/user-details/user-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-details",
            "styleUrls": [
                "./user-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-details',\n  templateUrl: './user-details.component.html',\n  styleUrls: ['./user-details.component.scss']\n})\nexport class UserDetailsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-details works!</p>\n"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-851f52df11cc5c8cb651d2a20b6f912e067d4c1d8ee8a5e92b5a5e026737823fd5b93408d8e2eca173084a8701b152bbce6bc059b73b71b0391adfb652fc5111",
            "file": "src/app/admin/users/components/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [
                "./user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['status','first_name','last_name', 'email', 'location','role', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "filterControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewUserDetails",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/store/models/user.model';\nimport { UsersService } from '../../services/users.service';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss']\n})\nexport class UserListComponent implements OnInit {\n\n  public users : User[] = [];\n  filterControl : FormControl;\n  displayedColumns = ['status','first_name','last_name', 'email', 'location','role', 'actions'];\n\n  constructor( private _ar: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.users = this._ar.snapshot.data.users;\n  }\n  onFilterValueChanged(event){\n    throw new Error('Not implemented yet');\n  }\n  addUser(){\n    throw new Error('Not implemented yet');\n  }\n\n  viewUserDetails(user : User){\n    throw new Error('Not implemented yet');\n  }\n\n  updateUser(user : User){\n    throw new Error('Not implemented yet');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dot {\n  height: 25px;\n  width: 25px;\n  border-radius: 50%;\n  display: inline-block;\n  &.draft {\n    background-color: rgb(235, 220, 11);\n  }\n  &.active {\n    background-color: rgb(23, 189, 31);\n  }\n  &.published {\n    background-color: rgb(23, 189, 31);\n  }\n  &.archived {\n    background-color: rgb(235, 11, 11);\n  }\n}\n\ntable {\n  width: 100%;\n}\n",
                    "styleUrl": "./user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_ar",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_ar",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <h1>Utilisateurs enregistrés.</h1>\n      </mat-card-title>\n      <mat-card-subtitle>\n        <h2>{{  users.length }} utilisateurs.</h2>\n      </mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-actions align=\"end\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Rechercher un produit : </mat-label>\n        <input matInput (input)=\"onFilterValueChanged($event)\" />\n      </mat-form-field>\n      <button mat-mini-fab color=\"primary\" (click)=\"addUser()\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </mat-card-actions>\n    <mat-card-content>\n      <table\n        mat-table\n        [dataSource]=\"users\"\n        multiTemplateDataRows\n        class=\"mat-elevation-z8\"\n      >\n        <ng-container matColumnDef=\"status\">\n          <th mat-header-cell *matHeaderCellDef>Status</th>\n          <td mat-cell *matCellDef=\"let user\">\n            <span [ngClass]=\"['dot', user.status]\"></span>\n          </td>\n        </ng-container>\n        <ng-container matColumnDef=\"first_name\">\n          <th mat-header-cell *matHeaderCellDef>Nom</th>\n          <td mat-cell *matCellDef=\"let user\">{{ user.first_name }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"last_name\">\n          <th mat-header-cell *matHeaderCellDef>Prénom</th>\n          <td mat-cell *matCellDef=\"let user\">{{ user.last_name }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"email\">\n          <th mat-header-cell *matHeaderCellDef>Email</th>\n            <td mat-cell *matCellDef=\"let user\">{{ user.email }}</td>\n        </ng-container>\n        <ng-container matColumnDef=\"location\">\n            <th mat-header-cell *matHeaderCellDef>Localisation</th>\n              <td mat-cell *matCellDef=\"let user\">{{ user.location }}</td>\n          </ng-container>\n          <ng-container matColumnDef=\"role\">\n            <th mat-header-cell *matHeaderCellDef>Rôle</th>\n              <td mat-cell *matCellDef=\"let user\">{{ user.role ? user.role.name : null }}</td>\n          </ng-container>\n  \n        <ng-container matColumnDef=\"actions\">\n          <th mat-header-cell *matHeaderCellDef>Action</th>\n          <td mat-cell *matCellDef=\"let user\">\n            <button\n              mat-icon-button\n              color=\"primary\"\n              aria-label=\"Visualiser les détails\"\n              (click)=\"viewUserDetails(user)\"\n            >\n              <mat-icon>details</mat-icon>\n            </button>\n            <ng-container>\n              <button\n                mat-icon-button\n                color=\"primary\"\n                aria-label=\"Editer l'utilisateur\"\n                (click)=\"updateUser(user)\"\n              >\n                <mat-icon>edit</mat-icon>\n              </button>\n            </ng-container>\n          </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n        <!-- <tr mat-footer-row *matFooterRowDef=\"displayedColumns\"></tr> -->\n      </table>\n    </mat-card-content>\n  </mat-card>\n  "
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-51085c23cd099b1445b68c5efc2b054bfb0f3cdc3441a71161ff0fed02c63159881ecd7cac12eb256588f793db9981ef9a763038f889c31156db7853efa53f79",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { AdminNavigationComponent } from './components/admin-navigation/admin-navigation.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    AdminNavigationComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    AdminRoutingModule\n  ]\n})\nexport class AdminModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminNavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "id": "module-AdminRoutingModule-4962fa626fe59a6835b759f16913e0306e7033515bbf7c042576f5ec511bd4131b1ec4bf884a01596a01e14dc2fadecc5f17b54f7a1c0c93ebc4031e9a92295d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../auth/guards/auth.guard';\nimport { AdminNavigationComponent } from './components/admin-navigation/admin-navigation.component';\n\nconst routes: Routes = [\n  {\n    path : '', component : AdminNavigationComponent, canActivate : [AuthGuard],\n    children : [\n      {\n        path : 'users', loadChildren: () => \"import('./users/users.module').then(module => module.UsersModule)\", canActivate : [AuthGuard]\n      },\n      {\n        path : 'roles-permissions', loadChildren: () => \"import('./roles-permissions/roles-permissions.module').then(module => module.RolesPermissionsModule)\", canActivate : [AuthGuard]\n      },\n    ]\n  }  \n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-fa3c6117f7e2efec63ef67030e6e219dc68ac5c532668667b6e4c757741a2501b318d4ca1231cdcc479c4105e585f85429c2ef1832b98090e2f33b1692340f2e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, LOCALE_ID, ErrorHandler } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localeFr from '@angular/common/locales/fr';\r\nregisterLocaleData(localeFr, 'fr');\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { RouterState, StoreRouterConnectingModule } from '@ngrx/router-store';\r\nimport { reducers, metaReducers } from './store/reducers';\r\nimport { MyErrorHandler } from './utils/error-handler.utils';\r\nimport { CartModule } from './cart/cart.module';\r\n\r\nconst featuresModules = [\r\n  ToastrModule.forRoot({\r\n    positionClass: 'toast-bottom-full-width',\r\n    closeButton: true,\r\n  }),\r\n  AuthModule.forRoot(),\r\n  CartModule,\r\n];\r\n\r\nconst ngrxModules = [\r\n  StoreModule.forRoot(reducers, {\r\n    metaReducers,\r\n    runtimeChecks: {\r\n      strictStateImmutability: true,\r\n      strictActionImmutability: true,\r\n      strictStateSerializability: true,\r\n      strictActionSerializability: true,\r\n    },\r\n  }),\r\n  EffectsModule.forRoot([]),\r\n  StoreDevtoolsModule.instrument({\r\n    name: 'Home-Stock App',\r\n    logOnly: !environment.production,\r\n  }),\r\n  StoreRouterConnectingModule.forRoot({\r\n    stateKey: 'router',\r\n    routerState: RouterState.Minimal,\r\n  }),\r\n];\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, HomeComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    ...ngrxModules,\r\n    ...featuresModules,\r\n  ],\r\n  providers: [\r\n    { provide: LOCALE_ID, useValue: 'fr-FR' },\r\n    { provide: ErrorHandler, useClass: MyErrorHandler },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CartModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-9e9757f1f0cd0b26739d801fdf518b5f7eb65aa8ddaacd5dc56461325f6211b279cbb1e5c7b226baed2f41dcfda0cba25b895cdfa0c6a2ab87ec07def0521f26",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './auth/guards/auth.guard';\r\nimport { HomeComponent } from './home/home.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path : '', component : HomeComponent\r\n  }, \r\n  {\r\n    path : 'products', loadChildren: () => \"import('./products/products.module').then(module => module.ProductsModule)\", canActivate : [AuthGuard]\r\n  },\r\n  {\r\n    path : 'stocks', loadChildren: () => \"import('./stock/stock.module').then(module => module.StockModule)\", canActivate : [AuthGuard]\r\n  },\r\n  {\r\n    path : 'shopping-lists', loadChildren: () => \"import('./shopping-lists/shopping-lists.module').then(module => module.ShoppingListsModule)\", canActivate : [AuthGuard]\r\n  },\r\n  {\r\n    path : 'administration', loadChildren: () => \"import('./admin/admin.module').then(module => module.AdminModule)\", canActivate : [AuthGuard]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-895da1bae7d4e104d8ba1655da0472d195a80f237791d619102c5f6f2b8c36adf0f6b3c2dac0cd71b338d94e2f653bd311afc487abe246e3701d5ef52709ce3b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<AuthModule>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginFormComponent } from './components/login-form/login-form.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { RegisterFormComponent } from './components/register-form/register-form.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { authReducer } from './state/auth.reducer';\r\nimport { RouterModule } from '@angular/router';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { AuthEffects } from './state/auth.effects';\r\nimport { AuthGuard } from './guards/auth.guard';\r\nimport { AuthService } from './services/auth.service';\r\n\r\n@NgModule({\r\n  declarations: [LoginFormComponent, RegisterFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: 'login',\r\n        component: LoginFormComponent,\r\n      },\r\n      {\r\n        path: 'login/register',\r\n        component: RegisterFormComponent,\r\n      },\r\n    ]),\r\n    SharedModule,\r\n    StoreModule.forFeature('auth', authReducer),\r\n    EffectsModule.forFeature([AuthEffects]),\r\n  ],\r\n})\r\nexport class AuthModule {\r\n  static forRoot(): ModuleWithProviders<AuthModule> {\r\n    return {\r\n      ngModule: AuthModule,\r\n      providers: [AuthService, AuthGuard],\r\n    };\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "RegisterFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartModule",
            "id": "module-CartModule-8042485e49ce895917c578999d80adaccff7fa4cd569b87c80f9e3d0b2e6dc5ccd680970237abbab785dc3a8456f8bfb59b12c4354d92e66f562c7ab6afab164",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/cart/cart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CartListComponent } from './cart-list/cart-list.component';\nimport { StoreModule } from '@ngrx/store';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { reducer } from './state/cart.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ShoppingListEffects } from './state/cart.effects';\n\n\n\n@NgModule({\n  declarations: [\n    CartListComponent,\n  ],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('cart', reducer),\n    EffectsModule.forFeature([ShoppingListEffects]),\n    SharedModule\n  ],\n  exports: [\n    CartListComponent\n  ]\n})\nexport class CartModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CartListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CartListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomMaterialModule",
            "id": "module-CustomMaterialModule-084837c72a5848cce47424e645bd2a4ff5932b274ca2705396f9cea7b036212b49b1fafcb44032a32b8820b8ff5f60b55c13f04db61d3a01ddeb25f80afa4978",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material.module.ts",
            "methods": [],
            "sourceCode": "import { DragDropModule } from \"@angular/cdk/drag-drop\";\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatStepperModule } from \"@angular/material/stepper\";\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\nconst modules = [\r\n  CommonModule,\r\n  CdkTreeModule,\r\n  MatCheckboxModule,\r\n  MatPaginatorModule,\r\n  MatGridListModule,\r\n  MatTooltipModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatRadioModule,\r\n  MatSidenavModule,\r\n  MatListModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatInputModule,\r\n  MatDialogModule,\r\n  MatTableModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatExpansionModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatSortModule,\r\n  MatSlideToggleModule,\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatStepperModule,\r\n  MatProgressBarModule,\r\n  MatChipsModule,\r\n  MatTreeModule,\r\n  DragDropModule,\r\n  MatFormFieldModule\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    ...modules\r\n  ],\r\n  exports: [\r\n    ...modules\r\n  ],\r\n})\r\nexport class CustomMaterialModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsModule",
            "id": "module-ProductsModule-7cc44ccd1c6af2839de39679fed433ec761cb025bccd77f8abf3ea97d03582c798cc41b05d9ae75a9bcf34372722b58a65eccc8df0a664ed06a20d33cbfc5ebb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/products/products.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProductsRoutingModule } from './products-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\nimport { ProductContainerComponent } from './containers/product-container/product-container.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { CreateProductComponent } from './components/modals/create-product/create-product.component';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { UpdateProductComponent } from './components/modals/update-product/update-product.component';\r\nimport { ProductEffects } from './store/effects/product.effects';\r\nimport { ProductResolver } from './resolvers/product.resolver';\r\nimport { CartModule } from '../cart/cart.module';\r\nimport { LabelsEffects } from './store/effects/labels.effects';\r\nimport { UnitsEffects } from './store/effects/units.effects';\r\nimport { reducers } from './store/feature.reducer';\r\nimport { UnitResolver } from './resolvers/unit.resolver';\r\nimport { LabelResolver } from './resolvers/label.resolver';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProductContainerComponent,\r\n    ProductListComponent,\r\n    CreateProductComponent,\r\n    UpdateProductComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ProductsRoutingModule,\r\n    StoreModule.forFeature('products', reducers),\r\n    EffectsModule.forFeature([ProductEffects,LabelsEffects,UnitsEffects]),\r\n    SharedModule,\r\n    CartModule\r\n  ],\r\n  providers : [\r\n    ProductResolver,\r\n    UnitResolver,\r\n    LabelResolver\r\n  ]\r\n})\r\nexport class ProductsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreateProductComponent"
                        },
                        {
                            "name": "ProductContainerComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        },
                        {
                            "name": "UpdateProductComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CartModule"
                        },
                        {
                            "name": "ProductsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsRoutingModule",
            "id": "module-ProductsRoutingModule-2af87ea19ac23e7704e5ef59ee8c29660d47e8a1eedb072e88290ef0da780bc2dc75092a92b9867da50aafc1eaf6cea5d856675acbd64d6ef6e2958cebc7d75e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/products/products-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ProductContainerComponent } from './containers/product-container/product-container.component';\r\nimport { LabelResolver } from './resolvers/label.resolver';\r\nimport { ProductResolver } from './resolvers/product.resolver';\r\nimport { UnitResolver } from './resolvers/unit.resolver';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path : '', component : ProductContainerComponent,\r\n    resolve : {\r\n      products : ProductResolver,\r\n      units : UnitResolver,\r\n      labels : LabelResolver\r\n    }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProductsRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RolesPermissionsModule",
            "id": "module-RolesPermissionsModule-1cce7ce94198e6eb17704ba9b21fcccd21566ec99974f5d00f52c0dd5f56f7b0da5d32b1c1c3df9995ad8c78e8b7804ccd1fb6d4c424bc2c638c80bac9a0e961",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/roles-permissions/roles-permissions.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RolesListComponent } from './components/roles-list/roles-list.component';\nimport { RolesPermissionsRoutingModule } from './roles-permissions-routing.module';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { reducers } from './store/feature.reducer';\nimport { RolesEffects } from './store/roles/roles.effects';\nimport { PermissionsEffects } from './store/permissions/permissions.effects';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { RolePermissionsAssignmentComponent } from './components/role-permissions-assignment/role-permissions-assignment.component';\n\n\n\n@NgModule({\n  declarations: [\n    RolesListComponent,\n    RolePermissionsAssignmentComponent\n  ],\n  imports: [\n    CommonModule,\n    RolesPermissionsRoutingModule,\n    SharedModule,\n    StoreModule.forFeature('security', reducers),\n    EffectsModule.forFeature([RolesEffects,PermissionsEffects]),\n  ]\n})\nexport class RolesPermissionsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RolePermissionsAssignmentComponent"
                        },
                        {
                            "name": "RolesListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RolesPermissionsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RolesPermissionsRoutingModule",
            "id": "module-RolesPermissionsRoutingModule-ca2fc592303f980561b1b7a1dfb6103625774abff1b68c91362a92f19a836232ec3ea33189a36da2035dd995b23a66d30ec0af0f5d85feb478b17041d07bbc7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/roles-permissions/roles-permissions-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from 'src/app/auth/guards/auth.guard';\n\nimport { RolesListComponent } from './components/roles-list/roles-list.component';\nimport { PermissionsResolver } from './resolvers/permissions/permissions.resolver';\nimport { RolesResolver } from './resolvers/roles/roles.resolver';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RolesListComponent,\n    resolve: { roles: RolesResolver, permissions: PermissionsResolver },\n    canActivate: [AuthGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RolesPermissionsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-249151b86d86d0d7b041bb3708cbc3d4b505289d3307151131e0c555fda0b40b21d949138d460da3595644322ef291b27e29437723c1afac13687784c4e2a441",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CustomMaterialModule } from './material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { SecurityInterceptor } from './interceptors/SecurityInterceptor';\r\nimport { AddInCartModalComponent } from '../products/components/modals/add-in-cart-modal/add-in-cart-modal.component';\r\nimport { FileUploadComponent } from './components/file-upload/file-upload.component';\r\nimport { NgxJsonViewerModule } from 'ngx-json-viewer';\r\nimport { ErrorModalComponent } from './components/error-modal/error-modal.component';\r\n\r\nconst components = [\r\n  AddInCartModalComponent,\r\n  FileUploadComponent,\r\n  ErrorModalComponent\r\n]\r\n\r\nconst modules = [\r\n  CommonModule,\r\n  CustomMaterialModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  HttpClientModule,\r\n  NgxJsonViewerModule,\r\n]\r\n\r\nconst services = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: SecurityInterceptor, multi: true }\r\n]\r\n@NgModule({\r\n  declarations: [\r\n    ...components,\r\n    \r\n  ],\r\n  imports: [\r\n    ...modules\r\n  ],\r\n  providers: [...services],\r\n  exports: [...modules,...components ]\r\n})\r\nexport class SharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddInCartModalComponent"
                        },
                        {
                            "name": "ErrorModalComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddInCartModalComponent"
                        },
                        {
                            "name": "ErrorModalComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListsModule",
            "id": "module-ShoppingListsModule-dd61a3a77bd9e237c0ba3e7f7c97bf97f3114e4e832abaf16f316ff6a91dd88ab51b182b036aeb7816fbdc598bb1dd99048af42a2ecc2cf40f08669143b78779",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shopping-lists/shopping-lists.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { ShoppingListsComponent } from './components/shopping-lists/shopping-lists.component';\nimport { ListDetailsComponent } from './components/list-details/list-details.component';\nimport { StoreModule } from '@ngrx/store';\nimport { shoppingListsReducer } from './state/shopping-lists.reducers';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ShoppingListsEffects } from './state/shopping-lists.effects';\nimport { ShoppingListsRoutingModule } from './shopping-lists.routing.module';\nimport { ShoppingListsResolver } from './state/shopping-lists.resolver';\n\n\n\n@NgModule({\n  declarations: [\n    ShoppingListsComponent,\n    ListDetailsComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    ShoppingListsRoutingModule,\n    StoreModule.forFeature('shoppingLists', shoppingListsReducer),\n    EffectsModule.forFeature([ShoppingListsEffects])\n  ],providers:[ShoppingListsResolver]\n})\nexport class ShoppingListsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListDetailsComponent"
                        },
                        {
                            "name": "ShoppingListsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShoppingListsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListsRoutingModule",
            "id": "module-ShoppingListsRoutingModule-f2eb80188b89616493c6bbc9c0f00d56c87ea1fa54017fa9a91aafcac612144f43da1825c5464d2982820deeb40e011c9af85c61de143ff2399f5004412ba35d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shopping-lists/shopping-lists.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ShoppingListsComponent } from './components/shopping-lists/shopping-lists.component';\nimport { ShoppingListsResolver } from './state/shopping-lists.resolver';\n\n\nconst routes: Routes = [\n  {\n    path : '', component : ShoppingListsComponent,\n    resolve : {\n      products : ShoppingListsResolver\n    }\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ShoppingListsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StockModule",
            "id": "module-StockModule-3f47090a198cb089b3868beb85b379859bb0d3350f109b528b41869f7c41e309bc90c812fd38c01108769e497f6f081e5c4a1d63e6d6186c15fbe6552d7cb594",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/stock/stock.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StockListComponent } from './components/stock-list/stock-list.component';\r\nimport { StockRoutingModule } from './stock-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    StockListComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StockRoutingModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class StockModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StockListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "StockRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StockRoutingModule",
            "id": "module-StockRoutingModule-d04a04ac3aebc4c4a0cc747c03789da2edcd657b5896261984b0e750f19835a571a5bd63ec2b3e75ea8d98642567f57bc4be14a0e9053d63f96571f1cb5008ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/stock/stock-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { StockListComponent } from './components/stock-list/stock-list.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path : '', component : StockListComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class StockRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-6844e0ac9f23074b284364a84f4bf7c1f6e44498377563fb514380aacabcfba5e471e31d2262f44135088e7e601bdf7ff20382e2357add111787c4e96338d89f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UsersRoutingModule } from './users-routing.module';\nimport { UserListComponent } from './components/user-list/user-list.component';\nimport { UserDetailsComponent } from './components/modals/user-details/user-details.component';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { UserEffects } from './store/users.effects';\nimport { reducer } from './store/users.reducer';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    UserListComponent,\n    UserDetailsComponent\n  ],\n  imports: [\n    CommonModule,\n    UsersRoutingModule,\n    SharedModule,\n    StoreModule.forFeature('users', reducer),\n    EffectsModule.forFeature([UserEffects])\n  ]\n})\nexport class UsersModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserDetailsComponent"
                        },
                        {
                            "name": "UserListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-13b2c675fa1a3ea96138a6ab3b2444acbebdb6ade57304a5b4e900fb752314fe032908720e8f71f338baa1c7b36637a20add746c502b2116f5199e4387894187",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from 'src/app/auth/guards/auth.guard';\nimport { UserListComponent } from './components/user-list/user-list.component';\nimport { UsersResolver } from './resolvers/users.resolver';\nimport { UsersService } from './services/users.service';\n\nconst routes: Routes = [\n  {\n    path : '', component : UserListComponent,\n    resolve : { users : UsersResolver },\n    canActivate : [AuthGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers : [AuthGuard, UsersService]\n})\nexport class UsersRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UsersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<ProductInList>({\n  selectId: (productInList: ProductInList) => {\n    return productInList.product.id\n  }\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<ShoppingList>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<User>({\n    selectId: (user: User) => {\n      return user.id\n    }\n  })"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Label>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Product>({\n  sortComparer: compareProducts\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Unit>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Permission>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Role>()"
            },
            {
                "name": "addProductToCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Cart] Add Product to list', props<{ product: ProductInList }>())"
            },
            {
                "name": "allProductsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Load Products Effects] All Products Loaded', props<{ products: Array<Product> }>())"
            },
            {
                "name": "allShoppingListsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Shopping Lists] Load All Shopping Lists Success', props<{ shoppingLists: ShoppingList[] }>())"
            },
            {
                "name": "allShoppingListsLoadError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Shopping Lists] Load All Shopping Lists Error', props<{ shoppingLists: ShoppingList[] }>())"
            },
            {
                "name": "areAllShoppingListsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectShoppingListsState,\n    state => state.allShoppingListsLoaded\n)"
            },
            {
                "name": "areLabelsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectLabelState,\n    (state) => state.isLoading\n  )"
            },
            {
                "name": "areProductsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectUserState,\n  (state) => state.isLoading\n)"
            },
            {
                "name": "areProductsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProductState,\n  (state) => state.isLoading\n)"
            },
            {
                "name": "areProductsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectPermissionState,\n  (state) => state.isLoading\n)"
            },
            {
                "name": "areProductsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectRoleState,\n  (state) => state.isLoading\n)"
            },
            {
                "name": "areUnitsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUnitState,\n  (state) => state.isLoading\n)"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n    initialAuthState,\n    on(AuthActions.LogInSuccess, (state, { user }) => (\n        {   ...state,\n            user: user,\n        })),\n    on(LogInFailure, (state, { error }) => ({...state,errorMessage: error})),\n    on(LogOut, (state,action) => {\n        return {...state, user: null }\n    } )\n  )"
            },
            {
                "name": "checkOutCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Cart] CheckOut List', props<{ products: ProductInList[] }>())"
            },
            {
                "name": "checkOutCartSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Cart] CheckOut List Success', props<{ products: ProductInList[] }>())"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  AddInCartModalComponent,\r\n  FileUploadComponent,\r\n  ErrorModalComponent\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "createPermission",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Create Permission', props<{ permission: Permission }>())"
            },
            {
                "name": "createPermissionFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Create Permission (Failure)')"
            },
            {
                "name": "createPermissionSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Create Permission (Success)', props<{ permission: Permission }>())"
            },
            {
                "name": "createProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Products] Create Product', props<{ product: Product }>())"
            },
            {
                "name": "createProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Products] Create Product Success', props<{ product: Product }>())"
            },
            {
                "name": "createRole",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Create Role', props<{ role: Role }>())"
            },
            {
                "name": "createRoleFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Create Product (Failure)')"
            },
            {
                "name": "createRoleSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Create Product (Success)', props<{ role: Role }>())"
            },
            {
                "name": "createUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Create User',\n  props<{ user: User }>()\n)"
            },
            {
                "name": "createUserSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Create User Success',\n  props<{ user: User }>()\n)"
            },
            {
                "name": "deletePermission",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Remove Permissions', props<{ permissionId: number }>())"
            },
            {
                "name": "deletePermissionFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Remove Permissions (Failure)')"
            },
            {
                "name": "deletePermissionSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Remove Permissions (Success)', props<{ permissionId: number }>())"
            },
            {
                "name": "deleteRole",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Remove Product', props<{ roleId: number }>())"
            },
            {
                "name": "deleteRoleFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Remove Product (Failure)')"
            },
            {
                "name": "deleteRoleSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Remove Product (Success)', props<{ roleId: number }>())"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  api : 'http://localhost:3000/api',\r\n}"
            },
            {
                "name": "featuresModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  ToastrModule.forRoot({\r\n    positionClass: 'toast-bottom-full-width',\r\n    closeButton: true,\r\n  }),\r\n  AuthModule.forRoot(),\r\n  CartModule,\r\n]"
            },
            {
                "name": "filterPermissions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Filter Permissions', props<{ filter: string }>())"
            },
            {
                "name": "filterProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Products] Filter Products', props<{ filter: string }>())"
            },
            {
                "name": "filterRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Filter Roles', props<{ filter: string }>())"
            },
            {
                "name": "filterUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Filter Users',\n  props<{ filter: string }>()\n)"
            },
            {
                "name": "initialAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthState",
                "defaultValue": "{\n    user: undefined,\n}"
            },
            {
                "name": "initialCartState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getInitialState({\n  isLoading: false,\n})"
            },
            {
                "name": "initialShoppingListsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ShoppingListsState",
                "defaultValue": "adapter.getInitialState({\n    allShoppingListsLoaded : false\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "adapter.getInitialState({\n  isLoading: false,\n})"
            },
            {
                "name": "isAdmin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectAuthState,\n    auth => true //auth.user.role.name === 'Administrator'\n)"
            },
            {
                "name": "isLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectAuthState,\n    auth => !!auth.user\n)"
            },
            {
                "name": "isLoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectAuthState,\n    auth => !auth.user\n)"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadAllLabels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Labels] Fetch All')"
            },
            {
                "name": "loadAllLabelsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Labels Effect] Fetch All Failure')"
            },
            {
                "name": "loadAllLabelsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction( '[Labels Effect] Fetch All Success', props<{ labels: Array<Label> }>())"
            },
            {
                "name": "loadAllPermissions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Load All Permissions')"
            },
            {
                "name": "loadAllPermissionsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] All Permissions Loaded (Failure)')"
            },
            {
                "name": "loadAllPermissionsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] All Permissions Loaded (Success)', props<{ permissions: Array<Permission> }>())"
            },
            {
                "name": "loadAllProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Courses Resolver] Load All Products')"
            },
            {
                "name": "loadAllRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Load All Roles')"
            },
            {
                "name": "loadAllRolesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] All Roles Loaded (Failure)')"
            },
            {
                "name": "loadAllRolesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] All Roles Loaded (Success)', props<{ roles: Array<Role> }>())"
            },
            {
                "name": "loadAllShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Shopping Lists] Load All Shopping Lists')"
            },
            {
                "name": "loadAllUnits",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Units] Fetch All\")"
            },
            {
                "name": "loadAllUnitsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Units Effect] Fetch All Failure\")"
            },
            {
                "name": "loadAllUnitsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Units Effect] Fetch All Success\", props<{ units: Array<Unit> }>())"
            },
            {
                "name": "loadAllUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Users] Load All Users')"
            },
            {
                "name": "loadAllUsersFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Load All Users Failure'\n)"
            },
            {
                "name": "loadAllUsersSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users Load All Users Success',\n  props<{ users: Array<User> }>()\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LogIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Auth Form] Login\", props<{ email: string , password : string }>())"
            },
            {
                "name": "LogInFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Auth Effect] Login Failure\", props<{ error: string  }>())"
            },
            {
                "name": "LogInSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[Auth Effect] Login Success\", props<{ user: User }>())"
            },
            {
                "name": "LogOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[App] Logout\")"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!!environment.production ? [logger]\n  : []"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CommonModule,\r\n  CdkTreeModule,\r\n  MatCheckboxModule,\r\n  MatPaginatorModule,\r\n  MatGridListModule,\r\n  MatTooltipModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatRadioModule,\r\n  MatSidenavModule,\r\n  MatListModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatInputModule,\r\n  MatDialogModule,\r\n  MatTableModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatExpansionModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatSortModule,\r\n  MatSlideToggleModule,\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatStepperModule,\r\n  MatProgressBarModule,\r\n  MatChipsModule,\r\n  MatTreeModule,\r\n  DragDropModule,\r\n  MatFormFieldModule\r\n]"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CommonModule,\r\n  CustomMaterialModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  HttpClientModule,\r\n  NgxJsonViewerModule,\r\n]"
            },
            {
                "name": "ngrxModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  StoreModule.forRoot(reducers, {\r\n    metaReducers,\r\n    runtimeChecks: {\r\n      strictStateImmutability: true,\r\n      strictActionImmutability: true,\r\n      strictStateSerializability: true,\r\n      strictActionSerializability: true,\r\n    },\r\n  }),\r\n  EffectsModule.forRoot([]),\r\n  StoreDevtoolsModule.instrument({\r\n    name: 'Home-Stock App',\r\n    logOnly: !environment.production,\r\n  }),\r\n  StoreRouterConnectingModule.forRoot({\r\n    stateKey: 'router',\r\n    routerState: RouterState.Minimal,\r\n  }),\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialCartState,\n  on(CartActions.addProductToCart, (state, { product }) =>\n    adapter.addOne(product, state)\n  ),\n  on(CartActions.removeProductToCart, (state, { productId }) => adapter.removeOne(productId, state))\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n    adapter.getInitialState({\n        isLoading: false,\n    }),\n    on(UsersActions.loadAllUsers, (state) => ({...state, isLoading : true})),\n    on(UsersActions.loadAllUsersSuccess, (state, { users }) =>\n      adapter.setAll(users, {...state, isLoading : false})\n    ),\n  )"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(loadAllLabelsSuccess, (state, { labels }) => adapter.setAll(labels, {...state,isLoading: true})),\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(ProductActions.allProductsLoaded, (state, {products}) => adapter.setAll(products, { ...state, allProductsLoaded: true })),\n  on(ProductActions.createProductSuccess, (state, { product }) => adapter.addOne(product, state),),\n  on(ProductActions.updateProductSuccess, (state, { product }) => adapter.updateOne(product, state)),\n  \n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(loadAllUnits, (state) =>\n    adapter.setAll([], { ...state, isLoading: true })\n  ),\n  on(loadAllUnitsSuccess, (state, { units }) =>\n    adapter.setAll(units, { ...state, isLoading: false })\n  ),\n  on(loadAllUnitsFailure, (state) =>\n    adapter.setAll([], { ...state, isLoading: false })\n  )\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(PermissionsActions.loadAllPermissions, (state) => ({...state, isLoading: true})),\n  on(PermissionsActions.loadAllPermissionsSuccess, (state, { permissions }) => adapter.setAll(permissions, {...state, isLoading: true}),),\n  \n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(RolesActions.loadAllRoles, (state) => ({...state, isLoading: true})),\n  on(RolesActions.loadAllRolesSuccess, (state, { roles }) => adapter.setAll(roles, {...state, isLoading: true}),),\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/feature.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "combineReducers({\n    products: fromProducts.reducer,\n    labels: fromLabels.reducer,\n    units : fromUnits.reducer\n})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\n  router: routerReducer,\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/feature.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "combineReducers({\n    roles: fromRoles.reducer,\n    permissions: fromPermissions.reducer,\n})"
            },
            {
                "name": "removeProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Products] Remove Product', props<{ productId: string }>())"
            },
            {
                "name": "removeProductToCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Cart] Remove Product from list', props<{ productId: string }>())"
            },
            {
                "name": "removeUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Remove User',\n  props<{ userId: string }>()\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAllLabels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectLabelState, (state) =>\n    fromLabels.selectAll(state)\n)"
            },
            {
                "name": "selectAllPermissions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectPermissionState,\n  fromRoles.selectAll\n)"
            },
            {
                "name": "selectAllProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectProductState, (state) =>\n  fromProducts.selectAll(state)\n)"
            },
            {
                "name": "selectAllRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectRoleState,\n  fromRoles.selectAll\n)"
            },
            {
                "name": "selectAllShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectShoppingListsState,\n    fromShoppingLists.selectAll\n  )"
            },
            {
                "name": "selectAllUnits",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUnitState, (state) =>\n  fromUnits.selectAll(state)\n)"
            },
            {
                "name": "selectAllUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectUserState, fromUsers.selectAll)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthState>('auth')"
            },
            {
                "name": "selectCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectCartState,\n    fromCart.selectAll\n  )"
            },
            {
                "name": "selectCartLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectCartState,\n    (state) => state.isLoading\n  )"
            },
            {
                "name": "selectCartState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromCart.State>('cart')"
            },
            {
                "name": "selectFeatureState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<FeatureState>('products')"
            },
            {
                "name": "selectFeatureState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<FeatureState>('security')"
            },
            {
                "name": "selectLabelState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.labels)"
            },
            {
                "name": "selectPermissionState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.permissions)"
            },
            {
                "name": "selectProductState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.products)"
            },
            {
                "name": "selectRoleState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.roles)"
            },
            {
                "name": "selectShoppingListById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) => createSelector(\n  selectAllShoppingLists,\n  (shoppingLists) => shoppingLists.find(shoppingList => shoppingList.id === id)\n\n)"
            },
            {
                "name": "selectShoppingListsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ShoppingListsState>('shoppingLists')"
            },
            {
                "name": "selectUnitState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/feature.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.units)"
            },
            {
                "name": "selectUserState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromUsers.State> ('users')"
            },
            {
                "name": "services",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: SecurityInterceptor, multi: true }\r\n]"
            },
            {
                "name": "shoppingListsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n    initialShoppingListsState,\n    on(ShoppingListsActions.allShoppingListsLoaded, (state, action) => adapter.setAll(action.shoppingLists, {...state, allShoppingListsLoaded: true})),\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/state/cart.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "updateShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Shopping Lists] Update Shopping List', props<{ shoppingList: Update<ProductInList> }>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "updateUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Update User',\n  props<{ user: User }>()\n)"
            },
            {
                "name": "updateUserSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Users] Update User Success',\n  props<{ uUser: Update<User> }>()\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/users/store/users.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/labels/labels.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "updateProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Products] Update Product', props<{ product: Product }>())"
            },
            {
                "name": "updateProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Products] Update Product Success',  props<{ product: Update<Product> }>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/products/products.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/units/units.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "updatePermissionFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Update Permissions (Failure)')"
            },
            {
                "name": "updatePermissionSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Update Permissions (Success)',  props<{ permission: Update<Permission> }>())"
            },
            {
                "name": "updateProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Permissions] Update Permissions', props<{ permission: Permission }>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "updateProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Update Product', props<{ role: Role }>())"
            },
            {
                "name": "updateRoleFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Update Product (Failure)')"
            },
            {
                "name": "updateRoleSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roles] Update Product (Success)',  props<{ role: Update<Role> }>())"
            },
            {
                "name": "user",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/state/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectAuthState,\n    auth => auth.user\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "compareProducts",
                "file": "src/app/store/models/product.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "Product",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logger",
                "file": "src/app/store/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<any>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "ActionReducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Permission",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/admin/roles-permissions/store/models/permission.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Model Permission</p>\n",
                "kind": 181
            },
            {
                "name": "Role",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/admin/roles-permissions/store/models/role.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Model Role</p>\n",
                "kind": 181
            },
            {
                "name": "User",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/store/models/user.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Model User</p>\n",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/cart/state/cart.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ProductInList>({\n  selectId: (productInList: ProductInList) => {\n    return productInList.product.id\n  }\n})"
                },
                {
                    "name": "initialCartState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getInitialState({\n  isLoading: false,\n})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialCartState,\n  on(CartActions.addProductToCart, (state, { product }) =>\n    adapter.addOne(product, state)\n  ),\n  on(CartActions.removeProductToCart, (state, { productId }) => adapter.removeOne(productId, state))\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/shopping-lists/state/shopping-lists.reducers.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShoppingList>()"
                },
                {
                    "name": "initialShoppingListsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ShoppingListsState",
                    "defaultValue": "adapter.getInitialState({\n    allShoppingListsLoaded : false\n})"
                },
                {
                    "name": "shoppingListsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n    initialShoppingListsState,\n    on(ShoppingListsActions.allShoppingListsLoaded, (state, action) => adapter.setAll(action.shoppingLists, {...state, allShoppingListsLoaded: true})),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/admin/users/store/users.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<User>({\n    selectId: (user: User) => {\n      return user.id\n    }\n  })"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n    adapter.getInitialState({\n        isLoading: false,\n    }),\n    on(UsersActions.loadAllUsers, (state) => ({...state, isLoading : true})),\n    on(UsersActions.loadAllUsersSuccess, (state, { users }) =>\n      adapter.setAll(users, {...state, isLoading : false})\n    ),\n  )"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/products/store/labels/labels.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Label>()"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(loadAllLabelsSuccess, (state, { labels }) => adapter.setAll(labels, {...state,isLoading: true})),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/products/store/products/products.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Product>({\n  sortComparer: compareProducts\n})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(ProductActions.allProductsLoaded, (state, {products}) => adapter.setAll(products, { ...state, allProductsLoaded: true })),\n  on(ProductActions.createProductSuccess, (state, { product }) => adapter.addOne(product, state),),\n  on(ProductActions.updateProductSuccess, (state, { product }) => adapter.updateOne(product, state)),\n  \n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/products/store/units/units.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Unit>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({\n  isLoading: false,\n})"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(loadAllUnits, (state) =>\n    adapter.setAll([], { ...state, isLoading: true })\n  ),\n  on(loadAllUnitsSuccess, (state, { units }) =>\n    adapter.setAll(units, { ...state, isLoading: false })\n  ),\n  on(loadAllUnitsFailure, (state) =>\n    adapter.setAll([], { ...state, isLoading: false })\n  )\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Permission>()"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(PermissionsActions.loadAllPermissions, (state) => ({...state, isLoading: true})),\n  on(PermissionsActions.loadAllPermissionsSuccess, (state, { permissions }) => adapter.setAll(permissions, {...state, isLoading: true}),),\n  \n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/admin/roles-permissions/store/roles/roles.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Role>()"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  adapter.getInitialState({\n    isLoading: false,\n  }),\n  on(RolesActions.loadAllRoles, (state) => ({...state, isLoading: true})),\n  on(RolesActions.loadAllRolesSuccess, (state, { roles }) => adapter.setAll(roles, {...state, isLoading: true}),),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/cart/state/cart.actions.ts": [
                {
                    "name": "addProductToCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Cart] Add Product to list', props<{ product: ProductInList }>())"
                },
                {
                    "name": "checkOutCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Cart] CheckOut List', props<{ products: ProductInList[] }>())"
                },
                {
                    "name": "checkOutCartSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Cart] CheckOut List Success', props<{ products: ProductInList[] }>())"
                },
                {
                    "name": "removeProductToCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Cart] Remove Product from list', props<{ productId: string }>())"
                }
            ],
            "src/app/products/store/products/products.actions.ts": [
                {
                    "name": "allProductsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Load Products Effects] All Products Loaded', props<{ products: Array<Product> }>())"
                },
                {
                    "name": "createProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Products] Create Product', props<{ product: Product }>())"
                },
                {
                    "name": "createProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Products] Create Product Success', props<{ product: Product }>())"
                },
                {
                    "name": "filterProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Products] Filter Products', props<{ filter: string }>())"
                },
                {
                    "name": "loadAllProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Courses Resolver] Load All Products')"
                },
                {
                    "name": "removeProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Products] Remove Product', props<{ productId: string }>())"
                },
                {
                    "name": "updateProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Products] Update Product', props<{ product: Product }>())"
                },
                {
                    "name": "updateProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Products] Update Product Success',  props<{ product: Update<Product> }>())"
                }
            ],
            "src/app/shopping-lists/state/shopping-lists.actions.ts": [
                {
                    "name": "allShoppingListsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Shopping Lists] Load All Shopping Lists Success', props<{ shoppingLists: ShoppingList[] }>())"
                },
                {
                    "name": "allShoppingListsLoadError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Shopping Lists] Load All Shopping Lists Error', props<{ shoppingLists: ShoppingList[] }>())"
                },
                {
                    "name": "loadAllShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Shopping Lists] Load All Shopping Lists')"
                },
                {
                    "name": "updateShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Shopping Lists] Update Shopping List', props<{ shoppingList: Update<ProductInList> }>())"
                }
            ],
            "src/app/shopping-lists/state/shopping-lists.selectors.ts": [
                {
                    "name": "areAllShoppingListsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectShoppingListsState,\n    state => state.allShoppingListsLoaded\n)"
                },
                {
                    "name": "selectAllShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectShoppingListsState,\n    fromShoppingLists.selectAll\n  )"
                },
                {
                    "name": "selectShoppingListById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) => createSelector(\n  selectAllShoppingLists,\n  (shoppingLists) => shoppingLists.find(shoppingList => shoppingList.id === id)\n\n)"
                },
                {
                    "name": "selectShoppingListsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ShoppingListsState>('shoppingLists')"
                }
            ],
            "src/app/products/store/labels/labels.selectors.ts": [
                {
                    "name": "areLabelsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectLabelState,\n    (state) => state.isLoading\n  )"
                },
                {
                    "name": "selectAllLabels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectLabelState, (state) =>\n    fromLabels.selectAll(state)\n)"
                }
            ],
            "src/app/admin/users/store/users.selectors.ts": [
                {
                    "name": "areProductsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectUserState,\n  (state) => state.isLoading\n)"
                },
                {
                    "name": "selectAllUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUserState, fromUsers.selectAll)"
                },
                {
                    "name": "selectUserState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromUsers.State> ('users')"
                }
            ],
            "src/app/products/store/products/products.selectors.ts": [
                {
                    "name": "areProductsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProductState,\n  (state) => state.isLoading\n)"
                },
                {
                    "name": "selectAllProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/products/products.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectProductState, (state) =>\n  fromProducts.selectAll(state)\n)"
                }
            ],
            "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts": [
                {
                    "name": "areProductsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectPermissionState,\n  (state) => state.isLoading\n)"
                },
                {
                    "name": "selectAllPermissions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectPermissionState,\n  fromRoles.selectAll\n)"
                }
            ],
            "src/app/admin/roles-permissions/store/roles/roles.selectors.ts": [
                {
                    "name": "areProductsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectRoleState,\n  (state) => state.isLoading\n)"
                },
                {
                    "name": "selectAllRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectRoleState,\n  fromRoles.selectAll\n)"
                }
            ],
            "src/app/products/store/units/units.selectors.ts": [
                {
                    "name": "areUnitsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUnitState,\n  (state) => state.isLoading\n)"
                },
                {
                    "name": "selectAllUnits",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectUnitState, (state) =>\n  fromUnits.selectAll(state)\n)"
                }
            ],
            "src/app/auth/state/auth.reducer.ts": [
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n    initialAuthState,\n    on(AuthActions.LogInSuccess, (state, { user }) => (\n        {   ...state,\n            user: user,\n        })),\n    on(LogInFailure, (state, { error }) => ({...state,errorMessage: error})),\n    on(LogOut, (state,action) => {\n        return {...state, user: null }\n    } )\n  )"
                },
                {
                    "name": "initialAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "defaultValue": "{\n    user: undefined,\n}"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  AddInCartModalComponent,\r\n  FileUploadComponent,\r\n  ErrorModalComponent\r\n]"
                },
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CommonModule,\r\n  CustomMaterialModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  HttpClientModule,\r\n  NgxJsonViewerModule,\r\n]"
                },
                {
                    "name": "services",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: SecurityInterceptor, multi: true }\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts": [
                {
                    "name": "createPermission",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Create Permission', props<{ permission: Permission }>())"
                },
                {
                    "name": "createPermissionFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Create Permission (Failure)')"
                },
                {
                    "name": "createPermissionSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Create Permission (Success)', props<{ permission: Permission }>())"
                },
                {
                    "name": "deletePermission",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Remove Permissions', props<{ permissionId: number }>())"
                },
                {
                    "name": "deletePermissionFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Remove Permissions (Failure)')"
                },
                {
                    "name": "deletePermissionSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Remove Permissions (Success)', props<{ permissionId: number }>())"
                },
                {
                    "name": "filterPermissions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Filter Permissions', props<{ filter: string }>())"
                },
                {
                    "name": "loadAllPermissions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Load All Permissions')"
                },
                {
                    "name": "loadAllPermissionsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] All Permissions Loaded (Failure)')"
                },
                {
                    "name": "loadAllPermissionsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] All Permissions Loaded (Success)', props<{ permissions: Array<Permission> }>())"
                },
                {
                    "name": "updatePermissionFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Update Permissions (Failure)')"
                },
                {
                    "name": "updatePermissionSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Update Permissions (Success)',  props<{ permission: Update<Permission> }>())"
                },
                {
                    "name": "updateProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Permissions] Update Permissions', props<{ permission: Permission }>())"
                }
            ],
            "src/app/admin/roles-permissions/store/roles/roles.actions.ts": [
                {
                    "name": "createRole",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Create Role', props<{ role: Role }>())"
                },
                {
                    "name": "createRoleFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Create Product (Failure)')"
                },
                {
                    "name": "createRoleSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Create Product (Success)', props<{ role: Role }>())"
                },
                {
                    "name": "deleteRole",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Remove Product', props<{ roleId: number }>())"
                },
                {
                    "name": "deleteRoleFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Remove Product (Failure)')"
                },
                {
                    "name": "deleteRoleSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Remove Product (Success)', props<{ roleId: number }>())"
                },
                {
                    "name": "filterRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Filter Roles', props<{ filter: string }>())"
                },
                {
                    "name": "loadAllRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Load All Roles')"
                },
                {
                    "name": "loadAllRolesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] All Roles Loaded (Failure)')"
                },
                {
                    "name": "loadAllRolesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] All Roles Loaded (Success)', props<{ roles: Array<Role> }>())"
                },
                {
                    "name": "updateProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Update Product', props<{ role: Role }>())"
                },
                {
                    "name": "updateRoleFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Update Product (Failure)')"
                },
                {
                    "name": "updateRoleSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roles] Update Product (Success)',  props<{ role: Update<Role> }>())"
                }
            ],
            "src/app/admin/users/store/users.actions.ts": [
                {
                    "name": "createUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Create User',\n  props<{ user: User }>()\n)"
                },
                {
                    "name": "createUserSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Create User Success',\n  props<{ user: User }>()\n)"
                },
                {
                    "name": "filterUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Filter Users',\n  props<{ filter: string }>()\n)"
                },
                {
                    "name": "loadAllUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Users] Load All Users')"
                },
                {
                    "name": "loadAllUsersFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Load All Users Failure'\n)"
                },
                {
                    "name": "loadAllUsersSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users Load All Users Success',\n  props<{ users: Array<User> }>()\n)"
                },
                {
                    "name": "removeUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Remove User',\n  props<{ userId: string }>()\n)"
                },
                {
                    "name": "updateUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Update User',\n  props<{ user: User }>()\n)"
                },
                {
                    "name": "updateUserSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/users/store/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Users] Update User Success',\n  props<{ uUser: Update<User> }>()\n)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  api : 'http://localhost:3000/api',\r\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "featuresModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  ToastrModule.forRoot({\r\n    positionClass: 'toast-bottom-full-width',\r\n    closeButton: true,\r\n  }),\r\n  AuthModule.forRoot(),\r\n  CartModule,\r\n]"
                },
                {
                    "name": "ngrxModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  StoreModule.forRoot(reducers, {\r\n    metaReducers,\r\n    runtimeChecks: {\r\n      strictStateImmutability: true,\r\n      strictActionImmutability: true,\r\n      strictStateSerializability: true,\r\n      strictActionSerializability: true,\r\n    },\r\n  }),\r\n  EffectsModule.forRoot([]),\r\n  StoreDevtoolsModule.instrument({\r\n    name: 'Home-Stock App',\r\n    logOnly: !environment.production,\r\n  }),\r\n  StoreRouterConnectingModule.forRoot({\r\n    stateKey: 'router',\r\n    routerState: RouterState.Minimal,\r\n  }),\r\n]"
                }
            ],
            "src/app/auth/state/auth.selectors.ts": [
                {
                    "name": "isAdmin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectAuthState,\n    auth => true //auth.user.role.name === 'Administrator'\n)"
                },
                {
                    "name": "isLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectAuthState,\n    auth => !!auth.user\n)"
                },
                {
                    "name": "isLoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectAuthState,\n    auth => !auth.user\n)"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthState>('auth')"
                },
                {
                    "name": "user",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectAuthState,\n    auth => auth.user\n)"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/app/products/store/labels/labels.actions.ts": [
                {
                    "name": "loadAllLabels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Labels] Fetch All')"
                },
                {
                    "name": "loadAllLabelsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Labels Effect] Fetch All Failure')"
                },
                {
                    "name": "loadAllLabelsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/labels/labels.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction( '[Labels Effect] Fetch All Success', props<{ labels: Array<Label> }>())"
                }
            ],
            "src/app/products/store/units/units.actions.ts": [
                {
                    "name": "loadAllUnits",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Units] Fetch All\")"
                },
                {
                    "name": "loadAllUnitsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Units Effect] Fetch All Failure\")"
                },
                {
                    "name": "loadAllUnitsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/units/units.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Units Effect] Fetch All Success\", props<{ units: Array<Unit> }>())"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/auth/state/auth.actions.ts": [
                {
                    "name": "LogIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Auth Form] Login\", props<{ email: string , password : string }>())"
                },
                {
                    "name": "LogInFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Auth Effect] Login Failure\", props<{ error: string  }>())"
                },
                {
                    "name": "LogInSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[Auth Effect] Login Success\", props<{ user: User }>())"
                },
                {
                    "name": "LogOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/state/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[App] Logout\")"
                }
            ],
            "src/app/store/reducers/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!!environment.production ? [logger]\n  : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\n  router: routerReducer,\n}"
                }
            ],
            "src/app/shared/material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CommonModule,\r\n  CdkTreeModule,\r\n  MatCheckboxModule,\r\n  MatPaginatorModule,\r\n  MatGridListModule,\r\n  MatTooltipModule,\r\n  MatTabsModule,\r\n  MatSelectModule,\r\n  MatRadioModule,\r\n  MatSidenavModule,\r\n  MatListModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatInputModule,\r\n  MatDialogModule,\r\n  MatTableModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatExpansionModule,\r\n  MatDatepickerModule,\r\n  MatNativeDateModule,\r\n  MatSortModule,\r\n  MatSlideToggleModule,\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatStepperModule,\r\n  MatProgressBarModule,\r\n  MatChipsModule,\r\n  MatTreeModule,\r\n  DragDropModule,\r\n  MatFormFieldModule\r\n]"
                }
            ],
            "src/app/products/store/feature.reducer.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/feature.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "combineReducers({\n    products: fromProducts.reducer,\n    labels: fromLabels.reducer,\n    units : fromUnits.reducer\n})"
                }
            ],
            "src/app/admin/roles-permissions/store/feature.reducer.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/feature.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "combineReducers({\n    roles: fromRoles.reducer,\n    permissions: fromPermissions.reducer,\n})"
                }
            ],
            "src/app/cart/state/cart.selectors.ts": [
                {
                    "name": "selectCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectCartState,\n    fromCart.selectAll\n  )"
                },
                {
                    "name": "selectCartLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectCartState,\n    (state) => state.isLoading\n  )"
                },
                {
                    "name": "selectCartState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/state/cart.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromCart.State>('cart')"
                }
            ],
            "src/app/products/store/feature.selectors.ts": [
                {
                    "name": "selectFeatureState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<FeatureState>('products')"
                },
                {
                    "name": "selectLabelState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.labels)"
                },
                {
                    "name": "selectProductState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.products)"
                },
                {
                    "name": "selectUnitState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.units)"
                }
            ],
            "src/app/admin/roles-permissions/store/feature.selectors.ts": [
                {
                    "name": "selectFeatureState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<FeatureState>('security')"
                },
                {
                    "name": "selectPermissionState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.permissions)"
                },
                {
                    "name": "selectRoleState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeatureState, (featureState) => featureState.roles)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/models/product.model.ts": [
                {
                    "name": "compareProducts",
                    "file": "src/app/store/models/product.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/index.ts": [
                {
                    "name": "logger",
                    "file": "src/app/store/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<any>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "ActionReducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/admin/roles-permissions/store/models/permission.model.ts": [
                {
                    "name": "Permission",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/admin/roles-permissions/store/models/permission.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Model Permission</p>\n",
                    "kind": 181
                }
            ],
            "src/app/admin/roles-permissions/store/models/role.model.ts": [
                {
                    "name": "Role",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/admin/roles-permissions/store/models/role.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Model Role</p>\n",
                    "kind": 181
                }
            ],
            "src/app/store/models/user.model.ts": [
                {
                    "name": "User",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/store/models/user.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Model User</p>\n",
                    "kind": 181
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "products",
                        "loadChildren": "./products/products.module#ProductsModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/products/products-routing.module.ts",
                                        "module": "ProductsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ProductContainerComponent",
                                                "resolve": {
                                                    "products": "ProductResolver",
                                                    "units": "UnitResolver",
                                                    "labels": "LabelResolver"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ProductsModule"
                            }
                        ]
                    },
                    {
                        "path": "stocks",
                        "loadChildren": "./stock/stock.module#StockModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/stock/stock-routing.module.ts",
                                        "module": "StockRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "StockListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "StockModule"
                            }
                        ]
                    },
                    {
                        "path": "shopping-lists",
                        "loadChildren": "./shopping-lists/shopping-lists.module#ShoppingListsModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/shopping-lists/shopping-lists.routing.module.ts",
                                        "module": "ShoppingListsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ShoppingListsComponent",
                                                "resolve": {
                                                    "products": "ShoppingListsResolver"
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ShoppingListsModule"
                            }
                        ]
                    },
                    {
                        "path": "administration",
                        "loadChildren": "./admin/admin.module#AdminModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/admin/admin-routing.module.ts",
                                        "module": "AdminRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AdminNavigationComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "users",
                                                        "loadChildren": "./users/users.module#UsersModule",
                                                        "canActivate": [
                                                            "AuthGuard"
                                                        ],
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/admin/users/users-routing.module.ts",
                                                                        "module": "UsersRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "UserListComponent",
                                                                                "resolve": {
                                                                                    "users": "UsersResolver"
                                                                                },
                                                                                "canActivate": [
                                                                                    "AuthGuard"
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "UsersModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "roles-permissions",
                                                        "loadChildren": "./roles-permissions/roles-permissions.module#RolesPermissionsModule",
                                                        "canActivate": [
                                                            "AuthGuard"
                                                        ],
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/admin/roles-permissions/roles-permissions-routing.module.ts",
                                                                        "module": "RolesPermissionsRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "RolesListComponent",
                                                                                "resolve": {
                                                                                    "roles": "RolesResolver",
                                                                                    "permissions": "PermissionsResolver"
                                                                                },
                                                                                "canActivate": [
                                                                                    "AuthGuard"
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "RolesPermissionsModule"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AdminModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/admin/components/admin-navigation/admin-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/components/role-permissions-assignment/role-permissions-assignment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RolePermissionsAssignmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/components/roles-list/roles-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RolesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/resolvers/permissions/permission.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "PermissionResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/resolvers/permissions/permissions.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "PermissionsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/resolvers/roles/role.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/resolvers/roles/roles.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RolesResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/services/permissions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PermissionsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/services/roles.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RolesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/feature.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/feature.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPermissionState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRoleState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createPermission",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createPermissionFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createPermissionSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deletePermission",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deletePermissionFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deletePermissionSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterPermissions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllPermissions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllPermissionsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllPermissionsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updatePermissionFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updatePermissionSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PermissionsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areProductsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/permissions/permissions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllPermissions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRoleFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRoleSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRoleFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRoleSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllRolesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllRolesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateRoleFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateRoleSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RolesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areProductsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/roles-permissions/store/roles/roles.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/components/modals/user-details/user-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/components/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/resolvers/user.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UserResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/resolvers/users.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UsersResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/services/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllUsersFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllUsersSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areProductsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/users/store/users.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featuresModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ngrxModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/register-form/register-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isAdmin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/state/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "user",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/cart-list/cart-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/services/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductToCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkOutCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkOutCartSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeProductToCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialCartState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCartLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/state/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCartState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/modals/add-in-cart-modal/add-in-cart-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddInCartModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/modals/create-product/create-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/modals/update-product/update-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/products/containers/product-container/product-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/products/resolvers/label.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LabelResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/resolvers/product.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProductResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/resolvers/unit.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UnitResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/services/file-upload.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FileUploadService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/products/services/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/effects/labels.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LabelsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/effects/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/effects/units.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UnitsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/feature.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/feature.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLabelState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/feature.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUnitState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllLabels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllLabelsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllLabelsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areLabelsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/labels/labels.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllLabels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allProductsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areProductsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/products/products.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllUnits",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllUnitsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllUnitsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areUnitsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/units/units.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllUnits",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/error-modal/error-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/SecurityInterceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "SecurityInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/labels.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LabelsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/units.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UnitsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "services",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/MismatchValidator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MismatchValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/components/list-details/list-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/components/shopping-lists/shopping-lists.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/services/shopping-lists.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allShoppingListsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allShoppingListsLoadError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAllShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialShoppingListsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ShoppingListsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "areAllShoppingListsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-lists/state/shopping-lists.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stock/components/stock-list/stock-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StockListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/stock/services/stock.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StockService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/abstract.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AbstractModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppFile",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icc",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Metadata",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/label.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/product-in-cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductInList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/product.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compareProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/unit.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Unit",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/error-handler.utils.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}